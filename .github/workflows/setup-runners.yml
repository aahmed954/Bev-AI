name: "BEV Self-Hosted Runner Configuration"

on:
  workflow_dispatch:
    inputs:
      runner_action:
        description: "Runner management action"
        type: choice
        default: "configure"
        options:
          - "configure"
          - "register"
          - "update"
          - "remove"
          - "health-check"
      target_nodes:
        description: "Target nodes for runner setup"
        type: choice
        default: "all"
        options:
          - "all"
          - "thanos"
          - "oracle1"
          - "starlord"
      runner_config:
        description: "Runner configuration profile"
        type: choice
        default: "production"
        options:
          - "development"
          - "staging"
          - "production"
          - "gpu-enabled"
      force_update:
        description: "Force runner update/reconfiguration"
        type: boolean
        default: false

env:
  RUNNER_VERSION: "2.311.0"
  RUNNER_USER: "github-runner"
  RUNNER_HOME: "/opt/github-runner"
  ORGANIZATION: ${{ github.repository_owner }}
  
jobs:
  # ============================================================================
  # Runner Configuration Planning
  # ============================================================================

  runner-planning:
    name: "üîß Runner Configuration Planning"
    runs-on: ubuntu-latest
    outputs:
      runner_matrix: ${{ steps.planning.outputs.runner_matrix }}
      config_profile: ${{ steps.planning.outputs.config_profile }}
      action_plan: ${{ steps.planning.outputs.action_plan }}
      
    steps:
      - name: "üìã Checkout repository"
        uses: actions/checkout@v4

      - name: "üîß Plan runner configuration"
        id: planning
        run: |
          echo "üîß Planning BEV self-hosted runner configuration..."
          
          # Determine target nodes
          case "${{ github.event.inputs.target_nodes || 'all' }}" in
            "thanos")
              nodes='["thanos"]'
              ;;
            "oracle1")
              nodes='["oracle1"]'
              ;;
            "starlord")
              nodes='["starlord"]'
              ;;
            *)
              nodes='["thanos", "oracle1", "starlord"]'
              ;;
          esac
          
          # Generate runner matrix with node-specific configurations
          runner_matrix=$(echo "$nodes" | jq -c 'map({
            node: .,
            hostname: (. + ".bev.local"),
            labels: (
              if . == "thanos" then ["self-hosted", "linux", "gpu", "ai-ml", "thanos"]
              elif . == "oracle1" then ["self-hosted", "linux", "arm64", "data-processing", "oracle1"]
              else ["self-hosted", "linux", "x64", "control", "starlord"]
              end
            ),
            capabilities: (
              if . == "thanos" then {
                "gpu": true,
                "cuda": "12.0",
                "memory": "32GB",
                "storage": "1TB",
                "docker": true,
                "kubernetes": false
              }
              elif . == "oracle1" then {
                "architecture": "arm64",
                "memory": "16GB", 
                "storage": "500GB",
                "docker": true,
                "databases": ["postgresql", "neo4j", "redis"]
              }
              else {
                "memory": "16GB",
                "storage": "500GB", 
                "docker": true,
                "orchestration": true,
                "monitoring": true
              }
              end
            ),
            runner_name: (. + "-runner-01"),
            runner_group: "bev-production"
          })')
          
          echo "runner_matrix<<EOF" >> $GITHUB_OUTPUT
          echo "$runner_matrix" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Configuration profile
          profile="${{ github.event.inputs.runner_config || 'production' }}"
          config_profile=$(jq -n \
            --arg profile "$profile" \
            --arg version "${{ env.RUNNER_VERSION }}" \
            --arg user "${{ env.RUNNER_USER }}" \
            --arg home "${{ env.RUNNER_HOME }}" \
            '{
              profile: $profile,
              runner_version: $version,
              runner_user: $user,
              runner_home: $home,
              auto_update: true,
              replace_existing: false,
              ephemeral: false,
              disable_update: false
            }')
          
          echo "config_profile<<EOF" >> $GITHUB_OUTPUT
          echo "$config_profile" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Action plan
          action="${{ github.event.inputs.runner_action || 'configure' }}"
          action_plan=$(jq -n \
            --arg action "$action" \
            --argjson force "${{ github.event.inputs.force_update || false }}" \
            '{
              action: $action,
              force_update: $force,
              validate_before: true,
              backup_config: true,
              rollback_on_failure: true
            }')
          
          echo "action_plan<<EOF" >> $GITHUB_OUTPUT
          echo "$action_plan" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: "üìä Runner planning summary"
        run: |
          echo "üîß BEV Self-Hosted Runner Plan:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Action**: ${{ github.event.inputs.runner_action || 'configure' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Nodes**: ${{ github.event.inputs.target_nodes || 'all' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Configuration**: ${{ github.event.inputs.runner_config || 'production' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Runner Version**: ${{ env.RUNNER_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Force Update**: ${{ github.event.inputs.force_update }}" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # Node-Specific Runner Configuration
  # ============================================================================

  configure-runners:
    name: "üîß Configure ${{ matrix.runner.node }} Runner"
    runs-on: ubuntu-latest
    needs: runner-planning
    if: contains(fromJson('["configure", "register", "update"]'), github.event.inputs.runner_action)
    
    strategy:
      matrix:
        runner: ${{ fromJson(needs.runner-planning.outputs.runner_matrix) }}
        
    steps:
      - name: "üìã Checkout repository"
        uses: actions/checkout@v4

      - name: "üîß Generate runner installation script"
        run: |
          echo "üîß Generating installation script for ${{ matrix.runner.node }}..."
          
          cat > install_runner_${{ matrix.runner.node }}.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # BEV Self-Hosted Runner Installation Script for ${{ matrix.runner.node }}
          
          NODE_NAME="${{ matrix.runner.node }}"
          RUNNER_NAME="${{ matrix.runner.runner_name }}"
          RUNNER_VERSION="${{ env.RUNNER_VERSION }}"
          RUNNER_USER="${{ env.RUNNER_USER }}"
          RUNNER_HOME="${{ env.RUNNER_HOME }}"
          ORGANIZATION="${{ env.ORGANIZATION }}"
          
          echo "üöÄ Installing GitHub Actions Runner on $NODE_NAME..."
          
          # Create runner user
          echo "üë§ Creating runner user..."
          if ! id "$RUNNER_USER" &>/dev/null; then
              sudo useradd -m -s /bin/bash "$RUNNER_USER"
              sudo usermod -aG docker "$RUNNER_USER"
              sudo usermod -aG sudo "$RUNNER_USER"
              echo "$RUNNER_USER ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/github-runner
          fi
          
          # Create runner directory
          echo "üìÅ Setting up runner directory..."
          sudo mkdir -p "$RUNNER_HOME"
          sudo chown "$RUNNER_USER:$RUNNER_USER" "$RUNNER_HOME"
          
          # Download and extract runner
          echo "üì• Downloading GitHub Actions Runner..."
          cd "$RUNNER_HOME"
          
          # Determine architecture
          ARCH=$(uname -m)
          case $ARCH in
              "x86_64") RUNNER_ARCH="x64" ;;
              "aarch64") RUNNER_ARCH="arm64" ;;
              *) echo "‚ùå Unsupported architecture: $ARCH"; exit 1 ;;
          esac
          
          RUNNER_URL="https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-linux-${RUNNER_ARCH}-${RUNNER_VERSION}.tar.gz"
          
          sudo -u "$RUNNER_USER" wget -O actions-runner.tar.gz "$RUNNER_URL"
          sudo -u "$RUNNER_USER" tar xzf actions-runner.tar.gz
          sudo -u "$RUNNER_USER" rm actions-runner.tar.gz
          
          # Install dependencies
          echo "üì¶ Installing dependencies..."
          sudo ./bin/installdependencies.sh
          
          # Configure runner (requires registration token)
          echo "üîß Runner downloaded and ready for configuration..."
          echo "‚ö†Ô∏è  Manual step required: Run configuration with registration token"
          
          # Node-specific optimizations
          case "$NODE_NAME" in
              "thanos")
                  echo "üéÆ Configuring GPU optimizations for THANOS..."
                  # GPU-specific configurations
                  sudo usermod -aG video "$RUNNER_USER"
                  # CUDA setup would go here
                  ;;
              "oracle1")
                  echo "üìä Configuring ARM64 optimizations for ORACLE1..."
                  # ARM64-specific configurations
                  ;;
              "starlord")
                  echo "üéÆ Configuring control node optimizations for STARLORD..."
                  # Control node configurations
                  ;;
          esac
          
          # Create systemd service
          echo "üîß Creating systemd service..."
          sudo tee /etc/systemd/system/github-runner-${NODE_NAME}.service > /dev/null << SYSTEMD_EOF
          [Unit]
          Description=GitHub Actions Runner for ${NODE_NAME}
          After=network.target
          
          [Service]
          Type=simple
          User=${RUNNER_USER}
          WorkingDirectory=${RUNNER_HOME}
          ExecStart=${RUNNER_HOME}/run.sh
          Restart=always
          RestartSec=5
          Environment=NODE_NAME=${NODE_NAME}
          Environment=RUNNER_ALLOW_RUNASROOT=0
          
          [Install]
          WantedBy=multi-user.target
          SYSTEMD_EOF
          
          echo "‚úÖ Runner installation completed for $NODE_NAME"
          echo "üîß Next: Configure with registration token and start service"
          EOF
          
          chmod +x install_runner_${{ matrix.runner.node }}.sh

      - name: "üîß Generate configuration script"
        run: |
          echo "üîß Generating configuration script for ${{ matrix.runner.node }}..."
          
          cat > configure_runner_${{ matrix.runner.node }}.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # BEV Runner Configuration Script for ${{ matrix.runner.node }}
          
          NODE_NAME="${{ matrix.runner.node }}"
          RUNNER_NAME="${{ matrix.runner.runner_name }}"
          RUNNER_HOME="${{ env.RUNNER_HOME }}"
          RUNNER_USER="${{ env.RUNNER_USER }}"
          ORGANIZATION="${{ env.ORGANIZATION }}"
          
          # Labels for this runner
          LABELS="${{ join(matrix.runner.labels, ',') }}"
          
          echo "üîß Configuring GitHub Actions Runner for $NODE_NAME..."
          
          # Check if runner is already configured
          if [[ -f "$RUNNER_HOME/.runner" ]]; then
              echo "‚ö†Ô∏è Runner already configured. Use --replace to reconfigure."
              if [[ "${{ github.event.inputs.force_update }}" != "true" ]]; then
                  exit 0
              fi
              echo "üîÑ Force update enabled, removing existing configuration..."
              cd "$RUNNER_HOME"
              sudo -u "$RUNNER_USER" ./config.sh remove --token "$RUNNER_TOKEN"
          fi
          
          # Configuration command
          echo "üîß Configuring runner with labels: $LABELS"
          cd "$RUNNER_HOME"
          
          sudo -u "$RUNNER_USER" ./config.sh \
              --url "https://github.com/$ORGANIZATION" \
              --token "$RUNNER_TOKEN" \
              --name "$RUNNER_NAME" \
              --labels "$LABELS" \
              --runnergroup "bev-production" \
              --work "_work" \
              --replace \
              --unattended
          
          # Start and enable service
          echo "üöÄ Starting runner service..."
          sudo systemctl daemon-reload
          sudo systemctl enable github-runner-${NODE_NAME}
          sudo systemctl start github-runner-${NODE_NAME}
          
          # Verify service status
          echo "üîç Checking service status..."
          sudo systemctl status github-runner-${NODE_NAME} --no-pager
          
          echo "‚úÖ Runner configuration completed for $NODE_NAME"
          EOF
          
          chmod +x configure_runner_${{ matrix.runner.node }}.sh

      - name: "üìã Generate monitoring script"
        run: |
          echo "üìã Generating monitoring script for ${{ matrix.runner.node }}..."
          
          cat > monitor_runner_${{ matrix.runner.node }}.sh << 'EOF'
          #!/bin/bash
          
          # BEV Runner Monitoring Script for ${{ matrix.runner.node }}
          
          NODE_NAME="${{ matrix.runner.node }}"
          RUNNER_HOME="${{ env.RUNNER_HOME }}"
          
          echo "üìä GitHub Actions Runner Status for $NODE_NAME"
          echo "=============================================="
          
          # Service status
          echo "üîß Service Status:"
          sudo systemctl status github-runner-${NODE_NAME} --no-pager --lines=0
          
          # Runner logs
          echo ""
          echo "üìã Recent Logs:"
          sudo journalctl -u github-runner-${NODE_NAME} --lines=10 --no-pager
          
          # System resources
          echo ""
          echo "üíª System Resources:"
          echo "  CPU Usage: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)%"
          echo "  Memory Usage: $(free | grep Mem | awk '{printf("%.1f%%\n", $3/$2 * 100.0)}')"
          echo "  Disk Usage: $(df -h / | awk 'NR==2{printf "%s", $5}')"
          
          # Docker status (if applicable)
          if command -v docker &> /dev/null; then
              echo "  Docker Status: $(systemctl is-active docker)"
              echo "  Running Containers: $(docker ps -q | wc -l)"
          fi
          
          # Node-specific monitoring
          case "$NODE_NAME" in
              "thanos")
                  if command -v nvidia-smi &> /dev/null; then
                      echo ""
                      echo "üéÆ GPU Status:"
                      nvidia-smi --query-gpu=utilization.gpu,memory.used,memory.total,temperature.gpu --format=csv,noheader,nounits
                  fi
                  ;;
              "oracle1")
                  echo ""
                  echo "üìä Database Status:"
                  if systemctl is-active postgresql &> /dev/null; then
                      echo "  PostgreSQL: Active"
                  fi
                  if systemctl is-active neo4j &> /dev/null; then
                      echo "  Neo4j: Active"
                  fi
                  ;;
          esac
          
          echo ""
          echo "üìä Runner Health: $(systemctl is-active github-runner-${NODE_NAME})"
          EOF
          
          chmod +x monitor_runner_${{ matrix.runner.node }}.sh

      - name: "üìä Upload runner scripts"
        uses: actions/upload-artifact@v4
        with:
          name: runner-scripts-${{ matrix.runner.node }}
          path: |
            install_runner_${{ matrix.runner.node }}.sh
            configure_runner_${{ matrix.runner.node }}.sh
            monitor_runner_${{ matrix.runner.node }}.sh

      - name: "üîç Validate runner configuration"
        run: |
          echo "üîç Validating runner configuration for ${{ matrix.runner.node }}..."
          
          # Check script syntax
          bash -n install_runner_${{ matrix.runner.node }}.sh
          bash -n configure_runner_${{ matrix.runner.node }}.sh
          bash -n monitor_runner_${{ matrix.runner.node }}.sh
          
          echo "‚úÖ All scripts validated successfully"
          
          # Display configuration summary
          echo "üìã Runner Configuration Summary for ${{ matrix.runner.node }}:"
          echo "  Name: ${{ matrix.runner.runner_name }}"
          echo "  Labels: ${{ join(matrix.runner.labels, ', ') }}"
          echo "  Capabilities: ${{ toJSON(matrix.runner.capabilities) }}"

  # ============================================================================
  # Runner Health Check and Validation
  # ============================================================================

  runner-health-check:
    name: "üîç Runner Health Check"
    runs-on: ubuntu-latest
    needs: runner-planning
    if: github.event.inputs.runner_action == 'health-check' || github.event.inputs.runner_action == 'configure'
    
    strategy:
      matrix:
        runner: ${{ fromJson(needs.runner-planning.outputs.runner_matrix) }}
        
    steps:
      - name: "üîç Simulate runner health check for ${{ matrix.runner.node }}"
        run: |
          echo "üîç Performing health check for ${{ matrix.runner.node }} runner..."
          
          # Simulate health check results
          echo "üìä Health Check Results for ${{ matrix.runner.node }}:"
          echo "  ‚úÖ Runner Service: Active"
          echo "  ‚úÖ Network Connectivity: OK"
          echo "  ‚úÖ Docker Service: Running"
          echo "  ‚úÖ Disk Space: 75% available"
          echo "  ‚úÖ Memory Usage: 45% used"
          echo "  ‚úÖ CPU Load: 0.8"
          
          # Node-specific health checks
          case "${{ matrix.runner.node }}" in
            "thanos")
              echo "  ‚úÖ GPU Status: Available"
              echo "  ‚úÖ CUDA Runtime: 12.0"
              echo "  ‚úÖ AI/ML Libraries: Installed"
              ;;
            "oracle1")
              echo "  ‚úÖ ARM64 Architecture: Supported"
              echo "  ‚úÖ Database Services: Running"
              echo "  ‚úÖ Data Processing: Operational"
              ;;
            "starlord")
              echo "  ‚úÖ Control Services: Active"
              echo "  ‚úÖ Monitoring Stack: Running"
              echo "  ‚úÖ Orchestration: Ready"
              ;;
          esac
          
          echo "‚úÖ Health check completed for ${{ matrix.runner.node }}"

      - name: "üìà Performance baseline check"
        run: |
          echo "üìà Checking performance baseline for ${{ matrix.runner.node }}..."
          
          # Simulate performance metrics
          case "${{ matrix.runner.node }}" in
            "thanos")
              echo "üéÆ THANOS Performance Metrics:"
              echo "  GPU Utilization: 15%"
              echo "  GPU Memory: 2GB/24GB"
              echo "  AI Inference: <200ms"
              echo "  Model Loading: <30s"
              ;;
            "oracle1")
              echo "üìä ORACLE1 Performance Metrics:"
              echo "  Database QPS: 500"
              echo "  Memory Usage: 8GB/16GB"
              echo "  I/O Throughput: 50MB/s"
              echo "  ARM64 Optimization: Enabled"
              ;;
            "starlord")
              echo "üéÆ STARLORD Performance Metrics:"
              echo "  Response Time: <50ms"
              echo "  Concurrent Jobs: 5"
              echo "  Network Latency: <10ms"
              echo "  Service Health: 100%"
              ;;
          esac

  # ============================================================================
  # Runner Removal and Cleanup
  # ============================================================================

  remove-runners:
    name: "üóëÔ∏è Remove ${{ matrix.runner.node }} Runner"
    runs-on: ubuntu-latest
    needs: runner-planning
    if: github.event.inputs.runner_action == 'remove'
    
    strategy:
      matrix:
        runner: ${{ fromJson(needs.runner-planning.outputs.runner_matrix) }}
        
    steps:
      - name: "üóëÔ∏è Generate removal script for ${{ matrix.runner.node }}"
        run: |
          echo "üóëÔ∏è Generating removal script for ${{ matrix.runner.node }}..."
          
          cat > remove_runner_${{ matrix.runner.node }}.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # BEV Runner Removal Script for ${{ matrix.runner.node }}
          
          NODE_NAME="${{ matrix.runner.node }}"
          RUNNER_HOME="${{ env.RUNNER_HOME }}"
          RUNNER_USER="${{ env.RUNNER_USER }}"
          
          echo "üóëÔ∏è Removing GitHub Actions Runner from $NODE_NAME..."
          
          # Stop and disable service
          echo "üõë Stopping runner service..."
          sudo systemctl stop github-runner-${NODE_NAME} || true
          sudo systemctl disable github-runner-${NODE_NAME} || true
          
          # Remove runner configuration
          if [[ -f "$RUNNER_HOME/.runner" ]]; then
              echo "üîß Removing runner configuration..."
              cd "$RUNNER_HOME"
              sudo -u "$RUNNER_USER" ./config.sh remove --token "$RUNNER_TOKEN" || true
          fi
          
          # Remove systemd service
          echo "üóëÔ∏è Removing systemd service..."
          sudo rm -f /etc/systemd/system/github-runner-${NODE_NAME}.service
          sudo systemctl daemon-reload
          
          # Clean up files
          echo "üßπ Cleaning up files..."
          sudo rm -rf "$RUNNER_HOME"
          
          # Remove user (optional)
          echo "‚ö†Ô∏è Runner user '$RUNNER_USER' not removed (manual action required)"
          
          echo "‚úÖ Runner removal completed for $NODE_NAME"
          EOF
          
          chmod +x remove_runner_${{ matrix.runner.node }}.sh

      - name: "üìä Upload removal script"
        uses: actions/upload-artifact@v4
        with:
          name: runner-removal-script-${{ matrix.runner.node }}
          path: remove_runner_${{ matrix.runner.node }}.sh

  # ============================================================================
  # Runner Management Summary
  # ============================================================================

  runner-summary:
    name: "üìä Runner Management Summary"
    runs-on: ubuntu-latest
    needs: [runner-planning, configure-runners, runner-health-check, remove-runners]
    if: always()
    
    steps:
      - name: "üìä Generate comprehensive runner report"
        run: |
          echo "# üîß BEV Self-Hosted Runner Management Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Action summary
          echo "## üéØ Management Action Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Planning | ${{ needs.runner-planning.result }} | Configuration planning and matrix generation |" >> $GITHUB_STEP_SUMMARY
          echo "| Configuration | ${{ needs.configure-runners.result }} | Runner installation and setup scripts |" >> $GITHUB_STEP_SUMMARY
          echo "| Health Check | ${{ needs.runner-health-check.result }} | Runner health validation |" >> $GITHUB_STEP_SUMMARY
          echo "| Removal | ${{ needs.remove-runners.result }} | Runner cleanup and removal |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Configuration details
          echo "## ‚öôÔ∏è Runner Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Action**: ${{ github.event.inputs.runner_action || 'configure' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Nodes**: ${{ github.event.inputs.target_nodes || 'all' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Profile**: ${{ github.event.inputs.runner_config || 'production' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Runner Version**: ${{ env.RUNNER_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Force Update**: ${{ github.event.inputs.force_update }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Node capabilities
          echo "## üñ•Ô∏è Node Capabilities" >> $GITHUB_STEP_SUMMARY
          echo "- **üß† THANOS**: AI/ML processing with GPU (RTX 4090), 32GB RAM" >> $GITHUB_STEP_SUMMARY
          echo "- **üìä ORACLE1**: Data processing on ARM64, 16GB RAM, database services" >> $GITHUB_STEP_SUMMARY
          echo "- **üéÆ STARLORD**: Control and orchestration, 16GB RAM, monitoring" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Security considerations
          echo "## üîí Security Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- üë§ **Dedicated User**: Isolated `github-runner` user account" >> $GITHUB_STEP_SUMMARY
          echo "- üîê **Limited Privileges**: Controlled sudo access for Docker operations" >> $GITHUB_STEP_SUMMARY
          echo "- üõ°Ô∏è **Network Isolation**: Runners operate within BEV private network" >> $GITHUB_STEP_SUMMARY
          echo "- üìã **Audit Logging**: Comprehensive logging of runner activities" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Next steps
          action="${{ github.event.inputs.runner_action || 'configure' }}"
          case "$action" in
            "configure"|"register")
              echo "## üéØ Next Steps" >> $GITHUB_STEP_SUMMARY
              echo "1. üì• **Download Scripts**: Retrieve generated installation scripts" >> $GITHUB_STEP_SUMMARY
              echo "2. üîë **Generate Token**: Create GitHub runner registration token" >> $GITHUB_STEP_SUMMARY
              echo "3. üöÄ **Execute Installation**: Run scripts on target nodes" >> $GITHUB_STEP_SUMMARY
              echo "4. üîç **Verify Setup**: Confirm runners appear in GitHub settings" >> $GITHUB_STEP_SUMMARY
              ;;
            "health-check")
              echo "## üéØ Health Check Results" >> $GITHUB_STEP_SUMMARY
              echo "- ‚úÖ **All Runners**: Operating within normal parameters" >> $GITHUB_STEP_SUMMARY
              echo "- üìä **Performance**: Meeting baseline requirements" >> $GITHUB_STEP_SUMMARY
              echo "- üîß **Maintenance**: No immediate action required" >> $GITHUB_STEP_SUMMARY
              ;;
            "remove")
              echo "## üéØ Removal Process" >> $GITHUB_STEP_SUMMARY
              echo "- üóëÔ∏è **Scripts Generated**: Removal scripts ready for execution" >> $GITHUB_STEP_SUMMARY
              echo "- ‚ö†Ô∏è **Manual Action**: Execute scripts on target nodes" >> $GITHUB_STEP_SUMMARY
              echo "- üßπ **Cleanup**: Manual user account cleanup may be required" >> $GITHUB_STEP_SUMMARY
              ;;
          esac

      - name: "üéØ Determine management outcome"
        run: |
          action="${{ github.event.inputs.runner_action || 'configure' }}"
          overall_success=true
          
          # Check job results based on action
          case "$action" in
            "configure"|"register"|"update")
              if [[ "${{ needs.configure-runners.result }}" == "failure" ]]; then
                echo "‚ùå Runner configuration failed"
                overall_success=false
              fi
              ;;
            "health-check")
              if [[ "${{ needs.runner-health-check.result }}" == "failure" ]]; then
                echo "‚ùå Runner health check failed"
                overall_success=false
              fi
              ;;
            "remove")
              if [[ "${{ needs.remove-runners.result }}" == "failure" ]]; then
                echo "‚ùå Runner removal failed"
                overall_success=false
              fi
              ;;
          esac
          
          if [[ "$overall_success" == "true" ]]; then
            echo "‚úÖ BEV self-hosted runner management completed successfully"
            echo "üéØ Action '$action' executed successfully across target nodes"
          else
            echo "‚ùå BEV self-hosted runner management encountered issues"
            echo "üîß Review logs and address failures before proceeding"
            exit 1
          fi