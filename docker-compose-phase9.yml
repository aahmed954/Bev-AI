version: '3.9'

x-logging: &default-logging
  driver: json-file
  options:
    max-size: "10m"
    max-file: "3"

networks:
  bev_osint:
    external: true

volumes:
  autonomous_data:
  adaptive_learning_data:
  resource_manager_data:
  knowledge_evolution_data:
  ml_models:
  logs:
    external: true

services:
  # =============================================================
  # PHASE 9 - AUTONOMOUS ENHANCEMENT
  # =============================================================

  # Autonomous Operations Coordinator
  autonomous-coordinator:
    build:
      context: ./src/autonomous
      dockerfile: Dockerfile.enhanced_autonomous_controller
    container_name: bev_autonomous_coordinator
    restart: always
    depends_on:
      - postgres
      - neo4j
      - kafka-1
      - redis
    environment:
      POSTGRES_URI: ${POSTGRES_URI}
      NEO4J_URI: ${NEO4J_URI}
      NEO4J_USER: ${NEO4J_USER}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      KAFKA_BROKERS: kafka-1:9092,kafka-2:9092,kafka-3:9092
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/8
      AUTONOMOUS_LEVEL: 3
      DECISION_MODEL_PATH: /app/models/decision_model.pkl
      COORDINATION_RULES: /app/config/coordination_rules.json
      MAX_AUTONOMOUS_OPERATIONS: 50
      OPERATION_TIMEOUT: 3600
      SAFETY_CONSTRAINTS: /app/config/safety_constraints.json
      LOG_LEVEL: INFO
    volumes:
      - autonomous_data:/app/data
      - ml_models:/app/models
      - ./src/autonomous/config:/app/config:ro
      - logs:/app/logs
    ports:
      - "8009:8000"
    networks:
      bev_osint:
        ipv4_address: 172.30.0.32
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '2.5'
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Adaptive Learning System
  adaptive-learning:
    build:
      context: ./src/autonomous
      dockerfile: Dockerfile.adaptive_learning
    container_name: bev_adaptive_learning
    restart: always
    depends_on:
      - postgres
      - elasticsearch
      - kafka-1
      - redis
    environment:
      POSTGRES_URI: ${POSTGRES_URI}
      ELASTICSEARCH_URL: http://elasticsearch:9200
      KAFKA_BROKERS: kafka-1:9092,kafka-2:9092,kafka-3:9092
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/9
      LEARNING_RATE: 0.001
      MODEL_UPDATE_INTERVAL: 3600
      LEARNING_ALGORITHMS: reinforcement,supervised,unsupervised
      TRAINING_DATA_RETENTION: 30
      MODEL_VERSIONING: true
      AUTO_HYPERPARAMETER_TUNING: true
      PERFORMANCE_THRESHOLD: 0.85
      LOG_LEVEL: INFO
    volumes:
      - adaptive_learning_data:/app/data
      - ml_models:/app/models
      - ./src/autonomous/config:/app/config:ro
      - logs:/app/logs
    ports:
      - "8010:8000"
    networks:
      bev_osint:
        ipv4_address: 172.30.0.33
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          devices:
            - driver: nvidia
              count: 2
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Dynamic Resource Manager
  resource-manager:
    build:
      context: ./src/autonomous
      dockerfile: Dockerfile.resource_optimizer
    container_name: bev_resource_manager
    restart: always
    depends_on:
      - postgres
      - influxdb
      - kafka-1
      - redis
    environment:
      POSTGRES_URI: ${POSTGRES_URI}
      INFLUXDB_URL: http://influxdb:8086
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN}
      INFLUXDB_ORG: bev-osint
      INFLUXDB_BUCKET: resources
      KAFKA_BROKERS: kafka-1:9092,kafka-2:9092,kafka-3:9092
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/10
      RESOURCE_OPTIMIZATION_INTERVAL: 300
      CPU_THRESHOLD: 0.8
      MEMORY_THRESHOLD: 0.85
      DISK_THRESHOLD: 0.9
      SCALING_POLICY: /app/config/scaling_policy.json
      COST_OPTIMIZATION: true
      LOG_LEVEL: INFO
    volumes:
      - resource_manager_data:/app/data
      - ./src/autonomous/config:/app/config:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - logs:/app/logs
    ports:
      - "8011:8000"
    networks:
      bev_osint:
        ipv4_address: 172.30.0.34
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Knowledge Evolution System
  knowledge-evolution:
    build:
      context: ./src/autonomous
      dockerfile: Dockerfile.knowledge_evolution
    container_name: bev_knowledge_evolution
    restart: always
    depends_on:
      - postgres
      - neo4j
      - elasticsearch
      - kafka-1
    environment:
      POSTGRES_URI: ${POSTGRES_URI}
      NEO4J_URI: ${NEO4J_URI}
      NEO4J_USER: ${NEO4J_USER}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      ELASTICSEARCH_URL: http://elasticsearch:9200
      KAFKA_BROKERS: kafka-1:9092,kafka-2:9092,kafka-3:9092
      KNOWLEDGE_GRAPH_MODEL: /app/models/knowledge_graph.pkl
      EVOLUTION_ALGORITHMS: genetic,neural,gradient
      KNOWLEDGE_PRUNING_THRESHOLD: 0.3
      CONCEPT_DRIFT_DETECTION: true
      ONTOLOGY_UPDATE_INTERVAL: 86400
      SEMANTIC_SIMILARITY_THRESHOLD: 0.7
      LOG_LEVEL: INFO
    volumes:
      - knowledge_evolution_data:/app/data
      - ml_models:/app/models
      - ./src/autonomous/config:/app/config:ro
      - logs:/app/logs
    ports:
      - "8012:8000"
    networks:
      bev_osint:
        ipv4_address: 172.30.0.35
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 12G
          cpus: '4.0'
        reservations:
          devices:
            - driver: nvidia
              count: 2
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3