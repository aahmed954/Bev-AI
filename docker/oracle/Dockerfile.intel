# ARM64-optimized Intelligence Processing Service
FROM python:3.11-slim-bookworm

# Platform and service labels
LABEL platform="linux/arm64"
LABEL service="intelligence-processor"
LABEL maintainer="BEV OSINT Team"

# ARM64 optimizations
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV SERVICE_NAME="intel_processor"

# Install ARM64-optimized system packages including ML dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    pkg-config \
    libffi-dev \
    libssl-dev \
    libcurl4-openssl-dev \
    libopenblas-dev \
    liblapack-dev \
    gfortran \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Set up working directory
WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt ./
COPY src/agents/requirements.txt ./requirements-agents.txt 2>/dev/null || echo "# No agents requirements" > ./requirements-agents.txt

# Install Python dependencies with ARM64 optimization
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt && \
    pip install --no-cache-dir -r requirements-agents.txt && \
    pip install --no-cache-dir \
        requests \
        redis \
        celery \
        aiohttp \
        asyncio \
        pydantic \
        httpx \
        numpy \
        pandas \
        scipy \
        scikit-learn \
        psycopg2-binary \
        sqlalchemy

# Copy source code
COPY src/agents/ ./agents/
COPY src/infrastructure/ ./infrastructure/
COPY src/pipeline/ ./pipeline/
COPY src/security/ ./security/

# Create main intelligence processor entry point
RUN echo '#!/usr/bin/env python3\n\
import asyncio\n\
import sys\n\
sys.path.append("/app")\n\
from pipeline.toolmaster_orchestrator import ToolmasterOrchestrator\n\
from security.intel_fusion import IntelFusion\n\
\n\
async def main():\n\
    intel_processor = IntelFusion()\n\
    toolmaster = ToolmasterOrchestrator()\n\
    \n\
    # Start intelligence processing services\n\
    await asyncio.gather(\n\
        intel_processor.start(),\n\
        toolmaster.start()\n\
    )\n\
\n\
if __name__ == "__main__":\n\
    asyncio.run(main())\n\
' > /app/main.py && chmod +x /app/main.py

# Set permissions
RUN chmod -R 755 /app

# Expose service port
EXPOSE 8001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8001/health || exit 1

# Run intelligence processor
CMD ["python", "main.py"]