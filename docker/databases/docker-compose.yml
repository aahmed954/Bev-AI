# Complete Database Infrastructure for AI Swarm
# Place in: /home/starlord/Bev/docker/databases/docker-compose.yml
version: '3.8'

services:
  # PostgreSQL with pgvector for embeddings
  postgres:
    image: ankane/pgvector:latest
    container_name: ai_swarm_postgres
    environment:
      POSTGRES_DB: ai_swarm
      POSTGRES_USER: swarm_admin
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-SwarmDB2024!}
      POSTGRES_INITDB_ARGS: "-E UTF8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts/postgres:/docker-entrypoint-initdb.d
    command: postgres -c shared_preload_libraries=vector -c max_connections=1000
    networks:
      - ai_swarm_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G

  # Redis for caching and short-term memory
  redis:
    image: redis:7-alpine
    container_name: ai_swarm_redis
    command: redis-server --appendonly yes --maxmemory 4gb --maxmemory-policy allkeys-lru --requirepass ${REDIS_PASSWORD:-RedisSwarm2024!}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - ai_swarm_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Neo4j for knowledge graphs
  neo4j:
    image: neo4j:5-enterprise
    container_name: ai_swarm_neo4j
    environment:
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD:-Neo4jSwarm2024!}
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
      NEO4J_dbms_memory_heap_initial__size: 2G
      NEO4J_dbms_memory_heap_max__size: 4G
      NEO4J_dbms_memory_pagecache_size: 2G
      NEO4J_dbms_security_procedures_unrestricted: apoc.*,gds.*
      NEO4J_dbms_security_procedures_whitelist: apoc.*,gds.*
      NEO4JLABS_PLUGINS: '["apoc", "graph-data-science"]'
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_plugins:/plugins
    networks:
      - ai_swarm_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G

  # InfluxDB for metrics and time-series data
  influxdb:
    image: influxdb:2.7-alpine
    container_name: ai_swarm_influxdb
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_PASSWORD:-InfluxSwarm2024!}
      DOCKER_INFLUXDB_INIT_ORG: ai_swarm
      DOCKER_INFLUXDB_INIT_BUCKET: metrics
      DOCKER_INFLUXDB_INIT_RETENTION: 30d
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_TOKEN:-SwarmMetrics2024Token}
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    networks:
      - ai_swarm_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Qdrant vector database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: ai_swarm_qdrant
    ports:
      - "6333:6333"  # REST API
      - "6334:6334"  # gRPC
    volumes:
      - qdrant_data:/qdrant/storage
      - ./config/qdrant.yaml:/qdrant/config/production.yaml
    environment:
      QDRANT__SERVICE__API_KEY: ${QDRANT_API_KEY:-QdrantSwarm2024!}
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__LOG_LEVEL: INFO
    networks:
      - ai_swarm_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G

  # Weaviate vector database
  weaviate:
    image: semitechnologies/weaviate:latest
    container_name: ai_swarm_weaviate
    ports:
      - "8080:8080"
      - "50051:50051"  # gRPC
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'false'
      AUTHENTICATION_APIKEY_ENABLED: 'true'
      AUTHENTICATION_APIKEY_ALLOWED_KEYS: ${WEAVIATE_API_KEY:-WeaviateSwarm2024!}
      AUTHENTICATION_APIKEY_USERS: admin
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      CLUSTER_HOSTNAME: 'node1'
      ENABLE_MODULES: 'text2vec-transformers,generative-openai'
      TRANSFORMERS_INFERENCE_API: 'http://t2v-transformers:8080'
    volumes:
      - weaviate_data:/var/lib/weaviate
    networks:
      - ai_swarm_network
    restart: unless-stopped
    depends_on:
      - t2v-transformers
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G

  # Text2Vec Transformers for Weaviate
  t2v-transformers:
    image: semitechnologies/transformers-inference:sentence-transformers-multi-qa-MiniLM-L6-cos-v1
    container_name: ai_swarm_t2v
    environment:
      ENABLE_CUDA: '0'  # Set to '1' if GPU available
    networks:
      - ai_swarm_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Elasticsearch for logs and search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: ai_swarm_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-ElasticSwarm2024!}
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - ai_swarm_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G

  # Kibana for visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: ai_swarm_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD:-KibanaSwarm2024!}
    ports:
      - "5601:5601"
    networks:
      - ai_swarm_network
    depends_on:
      - elasticsearch
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  # MongoDB for document storage
  mongodb:
    image: mongo:7
    container_name: ai_swarm_mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-MongoSwarm2024!}
      MONGO_INITDB_DATABASE: ai_swarm
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - ai_swarm_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # MinIO for S3-compatible object storage
  minio:
    image: minio/minio:latest
    container_name: ai_swarm_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-MinioSwarm2024!}
      MINIO_BROWSER: on
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - minio_data:/data
    networks:
      - ai_swarm_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: ai_swarm_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - ai_swarm_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: ai_swarm_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-GrafanaSwarm2024!}
      - GF_INSTALL_PLUGINS=redis-datasource,redis-app
      - GF_SERVER_ROOT_URL=http://0.0.0.0:3000
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - ai_swarm_network
    depends_on:
      - prometheus
      - influxdb
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_plugins:
    driver: local
  influxdb_data:
    driver: local
  influxdb_config:
    driver: local
  qdrant_data:
    driver: local
  weaviate_data:
    driver: local
  elasticsearch_data:
    driver: local
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ai_swarm_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16