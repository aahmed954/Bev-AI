version: '3.9'

services:
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: bev-mcp-server
    restart: unless-stopped
    
    # Port configuration (changed from 3000 to 3010 to avoid Grafana conflict)
    ports:
      - "3010:3010"
    
    # Environment variables
    environment:
      # Server configuration
      MCP_SERVER_HOST: 0.0.0.0
      MCP_SERVER_PORT: 3010
      
      # Security configuration
      JWT_SECRET: ${JWT_SECRET:-BevJWTSecret2024ForTokenSigning}
      DATA_ENCRYPTION_KEY: ${DATA_ENCRYPTION_KEY:-BevDataEncryptionKey2024VerySecure32Chars}
      API_RATE_LIMIT: ${API_RATE_LIMIT:-100}
      API_RATE_WINDOW: ${API_RATE_WINDOW:-60}
      ALLOWED_NETWORKS: ${ALLOWED_NETWORKS:-172.30.0.0/16,127.0.0.1/32}
      
      # Database connections (updated IPs for BEV infrastructure)
      POSTGRES_URI: ${POSTGRES_URI:-postgresql://bev_admin:BevSecureDB2024!@172.21.0.2:5432/osint}
      NEO4J_URI: ${NEO4J_URI:-bolt://172.21.0.3:7687}
      NEO4J_USER: ${NEO4J_USER:-neo4j}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:-BevGraph2024!}
      REDIS_HOST: ${REDIS_HOST:-172.21.0.4}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-BevCache2024!}
      ELASTICSEARCH_HOST: ${ELASTICSEARCH_HOST:-172.21.0.5}
      ELASTICSEARCH_PORT: ${ELASTICSEARCH_PORT:-9200}
      
      # Connection pool settings
      POSTGRES_MIN_CONNECTIONS: ${POSTGRES_MIN_CONNECTIONS:-5}
      POSTGRES_MAX_CONNECTIONS: ${POSTGRES_MAX_CONNECTIONS:-20}
      REDIS_MAX_CONNECTIONS: ${REDIS_MAX_CONNECTIONS:-20}
      CONNECTION_TIMEOUT: ${CONNECTION_TIMEOUT:-30}
      QUERY_TIMEOUT: ${QUERY_TIMEOUT:-300}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      AUDIT_LOG_RETENTION_DAYS: ${AUDIT_LOG_RETENTION_DAYS:-90}
      
      # Performance
      SESSION_TIMEOUT: ${SESSION_TIMEOUT:-3600}
      JWT_EXPIRY_HOURS: ${JWT_EXPIRY_HOURS:-24}
      PASSWORD_MIN_LENGTH: ${PASSWORD_MIN_LENGTH:-12}
      MAX_REQUEST_SIZE: ${MAX_REQUEST_SIZE:-10000000}
    
    # Volume mounts
    volumes:
      - mcp_logs:/var/log
      - mcp_config:/app/config
      - /etc/localtime:/etc/localtime:ro
    
    # Network configuration
    networks:
      - bev_osint
    
    # Resource limits for security and performance
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
    
    # Health check
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    read_only: false  # Set to true for extra security if app doesn't need write access
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    
    # Dependencies
    depends_on:
      - redis-cache
      - postgres-db
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for caching and session management
  redis-cache:
    image: redis:7-alpine
    container_name: bev-mcp-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-BevCache2024!} --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - bev_osint
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-BevCache2024!}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for structured data
  postgres-db:
    image: postgres:15-alpine
    container_name: bev-mcp-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: osint
      POSTGRES_USER: bev_admin
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-BevSecureDB2024!}
      POSTGRES_INITDB_ARGS: "--auth-host=md5 --auth-local=md5"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - bev_osint
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bev_admin -d osint"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: bev-mcp-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - bev_osint

  # Grafana for monitoring dashboard (using port 3000)
  grafana:
    image: grafana/grafana:latest
    container_name: bev-mcp-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"  # This is why MCP server uses port 3010
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-BevGrafana2024!}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - bev_osint

# Networks
networks:
  bev_osint:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16

# Volumes
volumes:
  mcp_logs:
    driver: local
  mcp_config:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local