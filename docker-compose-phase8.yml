version: '3.9'

x-logging: &default-logging
  driver: json-file
  options:
    max-size: "10m"
    max-file: "3"

networks:
  bev_osint:
    external: true

volumes:
  tactical_intel_data:
  defense_automation_data:
  opsec_data:
  intel_fusion_data:
  ml_models:
  logs:
    external: true

services:
  # =============================================================
  # PHASE 8 - ADVANCED SECURITY OPERATIONS
  # =============================================================

  # Tactical Intelligence Processor
  tactical-intel:
    build:
      context: ./src/security
      dockerfile: Dockerfile.tactical_intelligence
    container_name: bev_tactical_intel
    restart: always
    depends_on:
      - postgres
      - neo4j
      - elasticsearch
      - kafka-1
    environment:
      POSTGRES_URI: ${POSTGRES_URI}
      NEO4J_URI: ${NEO4J_URI}
      NEO4J_USER: ${NEO4J_USER}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      ELASTICSEARCH_URL: http://elasticsearch:9200
      KAFKA_BROKERS: kafka-1:9092,kafka-2:9092,kafka-3:9092
      THREAT_INTEL_FEEDS: ${THREAT_INTEL_FEEDS}
      MITRE_ATT_CK_URL: https://attack.mitre.org/data/enterprise-attack.json
      INTELLIGENCE_CONFIDENCE_THRESHOLD: 0.8
      TACTICAL_ANALYSIS_INTERVAL: 300
      LOG_LEVEL: INFO
    volumes:
      - tactical_intel_data:/app/data
      - ./src/security/config:/app/config:ro
      - logs:/app/logs
    ports:
      - "8005:8000"
    networks:
      bev_osint:
        ipv4_address: 172.30.0.28
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Automated Threat Response
  defense-automation:
    build:
      context: ./src/security
      dockerfile: Dockerfile.defense_automation
    container_name: bev_defense_automation
    restart: always
    depends_on:
      - postgres
      - kafka-1
      - redis
    environment:
      POSTGRES_URI: ${POSTGRES_URI}
      KAFKA_BROKERS: kafka-1:9092,kafka-2:9092,kafka-3:9092
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/5
      DEFENSE_RULES_CONFIG: /app/config/defense_rules.json
      RESPONSE_AUTOMATION_LEVEL: 2
      MAX_AUTOMATED_RESPONSES: 10
      COOLDOWN_PERIOD: 300
      THREAT_SCORE_THRESHOLD: 0.75
      NOTIFICATION_WEBHOOKS: ${NOTIFICATION_WEBHOOKS}
      LOG_LEVEL: INFO
    volumes:
      - defense_automation_data:/app/data
      - ./src/security/config:/app/config:ro
      - logs:/app/logs
    ports:
      - "8006:8000"
    networks:
      bev_osint:
        ipv4_address: 172.30.0.29
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Operational Security Enforcement
  opsec-enforcer:
    build:
      context: ./src/security
      dockerfile: Dockerfile.opsec_enforcer
    container_name: bev_opsec_enforcer
    restart: always
    depends_on:
      - postgres
      - kafka-1
      - redis
      - tor
    environment:
      POSTGRES_URI: ${POSTGRES_URI}
      KAFKA_BROKERS: kafka-1:9092,kafka-2:9092,kafka-3:9092
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/6
      TOR_PROXY: ${TOR_PROXY}
      OPSEC_RULES_CONFIG: /app/config/opsec_rules.json
      PRIVACY_LEVEL: HIGH
      VPN_ROTATION_INTERVAL: 1800
      METADATA_STRIPPING: true
      TRAFFIC_ANALYSIS_THRESHOLD: 0.9
      OPERATIONAL_COMPARTMENTS: ${OPERATIONAL_COMPARTMENTS}
      LOG_LEVEL: INFO
    volumes:
      - opsec_data:/app/data
      - ./src/security/config:/app/config:ro
      - logs:/app/logs
    ports:
      - "8007:8000"
    networks:
      bev_osint:
        ipv4_address: 172.30.0.30
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Multi-Source Intelligence Correlation
  intel-fusion:
    build:
      context: ./src/security
      dockerfile: Dockerfile.intel_fusion
    container_name: bev_intel_fusion
    restart: always
    depends_on:
      - postgres
      - neo4j
      - elasticsearch
      - kafka-1
      - redis
    environment:
      POSTGRES_URI: ${POSTGRES_URI}
      NEO4J_URI: ${NEO4J_URI}
      NEO4J_USER: ${NEO4J_USER}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      ELASTICSEARCH_URL: http://elasticsearch:9200
      KAFKA_BROKERS: kafka-1:9092,kafka-2:9092,kafka-3:9092
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/7
      FUSION_MODEL_PATH: /app/models/intel_fusion.pkl
      CORRELATION_THRESHOLD: 0.8
      FUSION_CONFIDENCE_THRESHOLD: 0.85
      MAX_CORRELATION_DEPTH: 5
      TEMPORAL_CORRELATION_WINDOW: 3600
      LOG_LEVEL: INFO
    volumes:
      - intel_fusion_data:/app/data
      - ml_models:/app/models
      - ./src/security/config:/app/config:ro
      - logs:/app/logs
    ports:
      - "8008:8000"
    networks:
      bev_osint:
        ipv4_address: 172.30.0.31
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '3.0'
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3