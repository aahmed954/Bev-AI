version: '3.9'

# ORACLE1 Unified Deployment - ARM Cloud Server (100.96.197.84)
# All 5 phases integrated with existing foundation
# ARM-compatible images and resource optimization

x-logging: &default-logging
  driver: json-file
  options:
    max-size: "10m"
    max-file: "3"

x-arm-resources: &arm-resources
  deploy:
    resources:
      limits:
        memory: 400M
        cpus: '0.07'
      reservations:
        memory: 128M
        cpus: '0.02'

x-arm-small-resources: &arm-small-resources
  deploy:
    resources:
      limits:
        memory: 200M
        cpus: '0.04'
      reservations:
        memory: 64M
        cpus: '0.01'

x-arm-monitoring-resources: &arm-monitoring-resources
  deploy:
    resources:
      limits:
        memory: 1G
        cpus: '0.2'
      reservations:
        memory: 512M
        cpus: '0.05'

networks:
  bev_oracle:
    driver: bridge
    ipam:
      config:
        - subnet: 172.31.0.0/16
  # External network to THANOS
  external_thanos:
    external: true
    name: bev_osint

volumes:
  # Foundation volumes
  redis_data:
  n8n_data:
  nginx_logs:
  crawler_data:
  intel_data:
  proxy_data:

  # Phase 1 volumes
  influxdb_data:
  influxdb_data_replica:
  telegraf_data:

  # Phase 2 volumes
  minio_data1:
  minio_data2:
  minio_data3:
  celery_data:

  # Phase 3 volumes
  litellm_data:
  genetic_data:
  knowledge_data:
  toolmaster_data:
  edge_data:

  # Phase 4 volumes
  drm_data:
  watermark_data:
  crypto_data:

  # Phase 5 volumes
  n8n_advanced_data1:
  n8n_advanced_data2:
  n8n_advanced_data3:
  minio_expansion_data:
  crawler_blackmarket_data:
  vendor_data:
  transaction_data:
  multimodal_data:

  # Monitoring infrastructure volumes
  prometheus_data:
  prometheus_config:
  grafana_data:
  grafana_config:
  alertmanager_data:
  alertmanager_config:
  vault_data:
  vault_config:
  vault_tls:

services:
  # =============================================================================
  # EXISTING ORACLE1 FOUNDATION
  # =============================================================================

  # Lightweight Redis for distributed coordination
  redis-arm:
    image: redis:7-alpine
    platform: linux/arm64
    container_name: bev_redis_oracle
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always
    logging: *default-logging
    <<: *arm-small-resources
    networks:
      - bev_oracle
      - external_thanos
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # N8N workflow automation (ARM)
  n8n:
    image: n8nio/n8n:latest
    platform: linux/arm64
    container_name: bev_n8n
    environment:
      N8N_BASIC_AUTH_ACTIVE: "true"
      N8N_BASIC_AUTH_USER: admin
      N8N_BASIC_AUTH_PASSWORD: ${N8N_PASSWORD:-admin123}
      N8N_HOST: 0.0.0.0
      N8N_PORT: 5678
      DB_TYPE: sqlite
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
    depends_on:
      - redis-arm

  # Nginx load balancer
  nginx:
    image: nginx:alpine
    platform: linux/arm64
    container_name: bev_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
    restart: always
    logging: *default-logging
    <<: *arm-small-resources
    networks:
      - bev_oracle
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Research crawler service (ARM Python)
  research_crawler:
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.research
    container_name: bev_research_crawler
    environment:
      REDIS_HOST: redis-arm
      THANOS_API: http://100.122.12.54:8000
    volumes:
      - crawler_data:/app/data
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
      - external_thanos
    depends_on:
      - redis-arm

  # Intelligence processor (ARM Python)
  intel_processor:
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.intel
    container_name: bev_intel_processor
    environment:
      REDIS_HOST: redis-arm
      POSTGRES_HOST: 100.122.12.54
    volumes:
      - intel_data:/app/data
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
      - external_thanos
    depends_on:
      - redis-arm

  # Proxy rotation service
  proxy_manager:
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.proxy
    container_name: bev_proxy_manager
    ports:
      - "8888:8888"
    volumes:
      - proxy_data:/app/proxies
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle

  # =============================================================================
  # PHASE 1 - TIME-SERIES METRICS & MONITORING
  # =============================================================================

  # InfluxDB cluster - Primary instance
  influxdb-primary:
    image: influxdb:2.7-alpine
    platform: linux/arm64
    container_name: bev_influxdb_primary
    ports:
      - "8086:8086"
    environment:
      INFLUXDB_DB: bev_metrics
      INFLUXDB_ADMIN_USER: admin
      INFLUXDB_ADMIN_PASSWORD: ${INFLUXDB_PASSWORD:-admin123}
      INFLUXDB_HTTP_AUTH_ENABLED: "true"
    volumes:
      - influxdb_data:/var/lib/influxdb2
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
      - external_thanos
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # InfluxDB cluster - Replica instance
  influxdb-replica:
    image: influxdb:2.7-alpine
    platform: linux/arm64
    container_name: bev_influxdb_replica
    ports:
      - "8087:8086"
    environment:
      INFLUXDB_DB: bev_metrics_replica
      INFLUXDB_ADMIN_USER: admin
      INFLUXDB_ADMIN_PASSWORD: ${INFLUXDB_PASSWORD:-admin123}
      INFLUXDB_HTTP_AUTH_ENABLED: "true"
    volumes:
      - influxdb_data_replica:/var/lib/influxdb2
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
      - external_thanos
    depends_on:
      - influxdb-primary

  # Telegraf metrics collection from THANOS
  telegraf:
    image: telegraf:1.28-alpine
    platform: linux/arm64
    container_name: bev_telegraf
    environment:
      INFLUXDB_URL: http://influxdb-primary:8086
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN:-admin-token}
      THANOS_ENDPOINT: http://100.122.12.54:9090
    volumes:
      - telegraf_data:/tmp/telegraf
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: always
    logging: *default-logging
    <<: *arm-small-resources
    networks:
      - bev_oracle
      - external_thanos
    depends_on:
      - influxdb-primary

  # Node Exporter for ARM system metrics
  node-exporter:
    image: prom/node-exporter:latest
    platform: linux/arm64
    container_name: bev_node_exporter
    ports:
      - "9100:9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    restart: always
    logging: *default-logging
    <<: *arm-small-resources
    networks:
      - bev_oracle
      - external_thanos

  # =============================================================================
  # MONITORING INFRASTRUCTURE - ARM64 OPTIMIZED
  # =============================================================================

  # Prometheus Server - ARM64 compatible with THANOS integration
  prometheus:
    image: prom/prometheus:latest
    platform: linux/arm64
    container_name: bev_prometheus_oracle
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=15GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.external-url=http://100.96.197.84:9090'
      - '--log.level=info'
      - '--query.max-concurrency=50'
      - '--query.timeout=2m'
      - '--storage.remote.flush-deadline=1m'
    environment:
      PROMETHEUS_REPLICA: oracle1
      THANOS_RECEIVER_ENDPOINT: http://100.122.12.54:19291/api/v1/receive
      ALERTMANAGER_HOST: alertmanager
      ALERTMANAGER_PORT: "9093"
    volumes:
      - prometheus_data:/prometheus
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/prometheus-alerts.yml:/etc/prometheus/prometheus-alerts.yml:ro
      - prometheus_config:/etc/prometheus/config:ro
    restart: always
    logging: *default-logging
    <<: *arm-monitoring-resources
    networks:
      - bev_oracle
      - external_thanos
    depends_on:
      - redis-arm
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Dashboard Server - ARM64 compatible
  grafana:
    image: grafana/grafana:latest
    platform: linux/arm64
    container_name: bev_grafana_oracle
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-piechart-panel
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
      GF_SECURITY_ALLOW_EMBEDDING: "true"
      GF_AUTH_ANONYMOUS_ENABLED: "false"
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SMTP_ENABLED: "false"
      GF_ALERTING_ENABLED: "true"
      GF_UNIFIED_ALERTING_ENABLED: "true"
      GF_FEATURE_TOGGLES_ENABLE: prometheusAzureOverrideAudience
      GF_SERVER_ROOT_URL: http://100.96.197.84:3000
      GF_DATABASE_TYPE: sqlite3
      GF_DATABASE_PATH: /var/lib/grafana/grafana.db
      GF_SESSION_PROVIDER: file
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./config/grafana-dashboards.json:/etc/grafana/provisioning/dashboards/dashboards.json:ro
      - grafana_config:/etc/grafana/provisioning:ro
    restart: always
    logging: *default-logging
    <<: *arm-monitoring-resources
    networks:
      - bev_oracle
      - external_thanos
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AlertManager - ARM64 compatible notification management
  alertmanager:
    image: prom/alertmanager:latest
    platform: linux/arm64
    container_name: bev_alertmanager_oracle
    ports:
      - "9093:9093"
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://100.96.197.84:9093'
      - '--web.route-prefix=/'
      - '--cluster.listen-address=0.0.0.0:9094'
      - '--cluster.peer=100.122.12.54:9094'
      - '--log.level=info'
    environment:
      ALERTMANAGER_CLUSTER_PEER: 100.122.12.54:9094
    volumes:
      - alertmanager_data:/alertmanager
      - ./config/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_config:/etc/alertmanager:ro
    restart: always
    logging: *default-logging
    <<: *arm-small-resources
    networks:
      - bev_oracle
      - external_thanos
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9093/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Vault Coordination Service - ARM64 compatible secrets management
  vault:
    image: hashicorp/vault:latest
    platform: linux/arm64
    container_name: bev_vault_oracle
    ports:
      - "8200:8200"
      - "8201:8201"
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_ROOT_TOKEN:-vault-root-token}
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
      VAULT_CLUSTER_ADDR: https://100.96.197.84:8201
      VAULT_API_ADDR: https://100.96.197.84:8200
      VAULT_DISABLE_MLOCK: "true"
      VAULT_LOG_LEVEL: INFO
      VAULT_PATH: /vault/data
      VAULT_CONFIG_PATH: /vault/config
    volumes:
      - vault_data:/vault/data
      - vault_config:/vault/config
      - ./config/vault.hcl:/vault/config/vault.hcl:ro
      - vault_tls:/vault/tls:ro
    restart: always
    logging: *default-logging
    <<: *arm-monitoring-resources
    networks:
      - bev_oracle
      - external_thanos
    depends_on:
      - redis-arm
    healthcheck:
      test: ["CMD-SHELL", "vault status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # =============================================================================
  # PHASE 2 - CELERY WORKERS & MINIO STORAGE
  # =============================================================================

  # MinIO cluster - Node 1
  minio1:
    image: minio/minio:latest
    platform: linux/arm64
    container_name: bev_minio1
    ports:
      - "9001:9000"
      - "9011:9001"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD:-admin123456}
    command: server --console-address ":9001" http://minio{1...3}/data{1...2}
    volumes:
      - minio_data1:/data1
      - minio_data1:/data2
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO cluster - Node 2
  minio2:
    image: minio/minio:latest
    platform: linux/arm64
    container_name: bev_minio2
    ports:
      - "9002:9000"
      - "9012:9001"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD:-admin123456}
    command: server --console-address ":9001" http://minio{1...3}/data{1...2}
    volumes:
      - minio_data2:/data1
      - minio_data2:/data2
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
    depends_on:
      - minio1

  # MinIO cluster - Node 3
  minio3:
    image: minio/minio:latest
    platform: linux/arm64
    container_name: bev_minio3
    ports:
      - "9003:9000"
      - "9013:9001"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD:-admin123456}
    command: server --console-address ":9001" http://minio{1...3}/data{1...2}
    volumes:
      - minio_data3:/data1
      - minio_data3:/data2
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
    depends_on:
      - minio1

  # Celery Worker - Edge Computing
  celery-edge:
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.celery
    container_name: bev_celery_edge
    environment:
      CELERY_BROKER_URL: redis://redis-arm:6379/0
      CELERY_RESULT_BACKEND: redis://redis-arm:6379/0
      WORKER_TYPE: edge_computing
      THANOS_ENDPOINT: http://100.122.12.54:8000
    volumes:
      - celery_data:/app/data
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
      - external_thanos
    depends_on:
      - redis-arm

  # Celery Worker - Genetic Optimization
  celery-genetic:
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.celery
    container_name: bev_celery_genetic
    environment:
      CELERY_BROKER_URL: redis://redis-arm:6379/1
      CELERY_RESULT_BACKEND: redis://redis-arm:6379/1
      WORKER_TYPE: genetic_optimization
    volumes:
      - celery_data:/app/data
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
    depends_on:
      - redis-arm

  # Celery Worker - Knowledge Synthesis
  celery-knowledge:
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.celery
    container_name: bev_celery_knowledge
    environment:
      CELERY_BROKER_URL: redis://redis-arm:6379/2
      CELERY_RESULT_BACKEND: redis://redis-arm:6379/2
      WORKER_TYPE: knowledge_synthesis
    volumes:
      - celery_data:/app/data
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
    depends_on:
      - redis-arm

  # Celery Worker - ToolMaster
  celery-toolmaster:
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.celery
    container_name: bev_celery_toolmaster
    environment:
      CELERY_BROKER_URL: redis://redis-arm:6379/3
      CELERY_RESULT_BACKEND: redis://redis-arm:6379/3
      WORKER_TYPE: toolmaster
    volumes:
      - celery_data:/app/data
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
    depends_on:
      - redis-arm

  # =============================================================================
  # PHASE 3 - LITELLM GATEWAY & ORCHESTRATION
  # =============================================================================

  # LiteLLM Gateway - Node 1
  litellm-gateway-1:
    image: ghcr.io/berriai/litellm:main-latest
    platform: linux/arm64
    container_name: bev_litellm_1
    ports:
      - "5000:4000"
    environment:
      LITELLM_MASTER_KEY: ${LITELLM_KEY:-sk-1234567890}
      DATABASE_URL: sqlite:///tmp/litellm.db
    volumes:
      - litellm_data:/tmp
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
      - external_thanos

  # LiteLLM Gateway - Node 2
  litellm-gateway-2:
    image: ghcr.io/berriai/litellm:main-latest
    platform: linux/arm64
    container_name: bev_litellm_2
    ports:
      - "5001:4000"
    environment:
      LITELLM_MASTER_KEY: ${LITELLM_KEY:-sk-1234567890}
      DATABASE_URL: sqlite:///tmp/litellm.db
    volumes:
      - litellm_data:/tmp
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
      - external_thanos

  # LiteLLM Gateway - Node 3
  litellm-gateway-3:
    image: ghcr.io/berriai/litellm:main-latest
    platform: linux/arm64
    container_name: bev_litellm_3
    ports:
      - "5002:4000"
    environment:
      LITELLM_MASTER_KEY: ${LITELLM_KEY:-sk-1234567890}
      DATABASE_URL: sqlite:///tmp/litellm.db
    volumes:
      - litellm_data:/tmp
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
      - external_thanos

  # Genetic Prompt Optimizer
  genetic-optimizer:
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.genetic
    container_name: bev_genetic_optimizer
    environment:
      REDIS_HOST: redis-arm
      MINIO_ENDPOINT: minio1:9000
      MINIO_ACCESS_KEY: admin
      MINIO_SECRET_KEY: ${MINIO_PASSWORD:-admin123456}
    volumes:
      - genetic_data:/app/data
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
    depends_on:
      - redis-arm
      - minio1

  # Request Multiplexer
  request-multiplexer:
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.multiplexer
    container_name: bev_request_multiplexer
    ports:
      - "8080:8080"
    environment:
      LITELLM_ENDPOINTS: "http://litellm-gateway-1:4000,http://litellm-gateway-2:4000,http://litellm-gateway-3:4000"
      REDIS_HOST: redis-arm
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
    depends_on:
      - litellm-gateway-1
      - litellm-gateway-2
      - litellm-gateway-3

  # Knowledge Synthesis Engine
  knowledge-synthesis:
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.knowledge
    container_name: bev_knowledge_synthesis
    environment:
      REDIS_HOST: redis-arm
      MINIO_ENDPOINT: minio1:9000
      MINIO_ACCESS_KEY: admin
      MINIO_SECRET_KEY: ${MINIO_PASSWORD:-admin123456}
    volumes:
      - knowledge_data:/app/data
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
    depends_on:
      - redis-arm
      - minio1

  # ToolMaster Orchestrator
  toolmaster-orchestrator:
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.toolmaster
    container_name: bev_toolmaster_orchestrator
    environment:
      REDIS_HOST: redis-arm
      LITELLM_ENDPOINT: http://request-multiplexer:8080
    volumes:
      - toolmaster_data:/app/data
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
    depends_on:
      - redis-arm
      - request-multiplexer

  # Edge Computing Worker 1
  edge-worker-1:
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.edge
    container_name: bev_edge_worker_1
    environment:
      REDIS_HOST: redis-arm
      WORKER_ID: edge_1
      THANOS_ENDPOINT: http://100.122.12.54:8000
    volumes:
      - edge_data:/app/data
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
      - external_thanos
    depends_on:
      - redis-arm

  # Edge Computing Worker 2
  edge-worker-2:
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.edge
    container_name: bev_edge_worker_2
    environment:
      REDIS_HOST: redis-arm
      WORKER_ID: edge_2
      THANOS_ENDPOINT: http://100.122.12.54:8000
    volumes:
      - edge_data:/app/data
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
      - external_thanos
    depends_on:
      - redis-arm

  # Edge Computing Worker 3
  edge-worker-3:
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.edge
    container_name: bev_edge_worker_3
    environment:
      REDIS_HOST: redis-arm
      WORKER_ID: edge_3
      THANOS_ENDPOINT: http://100.122.12.54:8000
    volumes:
      - edge_data:/app/data
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
      - external_thanos
    depends_on:
      - redis-arm

  # Message Queue Infrastructure Worker
  mq-infrastructure:
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.mq
    container_name: bev_mq_infrastructure
    environment:
      REDIS_HOST: redis-arm
      CELERY_BROKER_URL: redis://redis-arm:6379/4
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
    depends_on:
      - redis-arm

  # =============================================================================
  # PHASE 4 - DRM & SECURITY RESEARCH
  # =============================================================================

  # DRM Researcher 1
  drm-researcher-1:
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.drm
    container_name: bev_drm_researcher_1
    environment:
      REDIS_HOST: redis-arm
      RESEARCHER_ID: drm_1
      MINIO_ENDPOINT: minio1:9000
    volumes:
      - drm_data:/app/data
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
    depends_on:
      - redis-arm
      - minio1

  # DRM Researcher 2
  drm-researcher-2:
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.drm
    container_name: bev_drm_researcher_2
    environment:
      REDIS_HOST: redis-arm
      RESEARCHER_ID: drm_2
      MINIO_ENDPOINT: minio1:9000
    volumes:
      - drm_data:/app/data
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
    depends_on:
      - redis-arm
      - minio1

  # Watermark Analyzer 1
  watermark-analyzer-1:
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.watermark
    container_name: bev_watermark_analyzer_1
    environment:
      REDIS_HOST: redis-arm
      ANALYZER_ID: watermark_1
      MINIO_ENDPOINT: minio1:9000
    volumes:
      - watermark_data:/app/data
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
    depends_on:
      - redis-arm
      - minio1

  # Watermark Analyzer 2
  watermark-analyzer-2:
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.watermark
    container_name: bev_watermark_analyzer_2
    environment:
      REDIS_HOST: redis-arm
      ANALYZER_ID: watermark_2
      MINIO_ENDPOINT: minio1:9000
    volumes:
      - watermark_data:/app/data
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
    depends_on:
      - redis-arm
      - minio1

  # Crypto Researcher 1
  crypto-researcher-1:
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.crypto
    container_name: bev_crypto_researcher_1
    environment:
      REDIS_HOST: redis-arm
      RESEARCHER_ID: crypto_1
      BLOCKCHAIN_ENDPOINTS: ${BLOCKCHAIN_ENDPOINTS:-}
    volumes:
      - crypto_data:/app/data
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
    depends_on:
      - redis-arm

  # Crypto Researcher 2
  crypto-researcher-2:
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.crypto
    container_name: bev_crypto_researcher_2
    environment:
      REDIS_HOST: redis-arm
      RESEARCHER_ID: crypto_2
      BLOCKCHAIN_ENDPOINTS: ${BLOCKCHAIN_ENDPOINTS:-}
    volumes:
      - crypto_data:/app/data
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
    depends_on:
      - redis-arm

  # =============================================================================
  # PHASE 5 - ADVANCED WORKFLOWS & BLACK MARKET INTELLIGENCE
  # =============================================================================

  # N8N Advanced Instance 1
  n8n-advanced-1:
    image: n8nio/n8n:latest
    platform: linux/arm64
    container_name: bev_n8n_advanced_1
    environment:
      N8N_BASIC_AUTH_ACTIVE: "true"
      N8N_BASIC_AUTH_USER: admin
      N8N_BASIC_AUTH_PASSWORD: ${N8N_PASSWORD:-admin123}
      N8N_HOST: 0.0.0.0
      N8N_PORT: 5678
      DB_TYPE: sqlite
      INSTANCE_ID: advanced_1
    ports:
      - "5679:5678"
    volumes:
      - n8n_advanced_data1:/home/node/.n8n
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
    depends_on:
      - redis-arm

  # N8N Advanced Instance 2
  n8n-advanced-2:
    image: n8nio/n8n:latest
    platform: linux/arm64
    container_name: bev_n8n_advanced_2
    environment:
      N8N_BASIC_AUTH_ACTIVE: "true"
      N8N_BASIC_AUTH_USER: admin
      N8N_BASIC_AUTH_PASSWORD: ${N8N_PASSWORD:-admin123}
      N8N_HOST: 0.0.0.0
      N8N_PORT: 5678
      DB_TYPE: sqlite
      INSTANCE_ID: advanced_2
    ports:
      - "5680:5678"
    volumes:
      - n8n_advanced_data2:/home/node/.n8n
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
    depends_on:
      - redis-arm

  # N8N Advanced Instance 3
  n8n-advanced-3:
    image: n8nio/n8n:latest
    platform: linux/arm64
    container_name: bev_n8n_advanced_3
    environment:
      N8N_BASIC_AUTH_ACTIVE: "true"
      N8N_BASIC_AUTH_USER: admin
      N8N_BASIC_AUTH_PASSWORD: ${N8N_PASSWORD:-admin123}
      N8N_HOST: 0.0.0.0
      N8N_PORT: 5678
      DB_TYPE: sqlite
      INSTANCE_ID: advanced_3
    ports:
      - "5681:5678"
    volumes:
      - n8n_advanced_data3:/home/node/.n8n
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
    depends_on:
      - redis-arm

  # MinIO Storage Expansion for Live2D models
  minio-expansion:
    image: minio/minio:latest
    platform: linux/arm64
    container_name: bev_minio_expansion
    ports:
      - "9004:9000"
      - "9014:9001"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD:-admin123456}
    command: server --console-address ":9001" /data
    volumes:
      - minio_expansion_data:/data
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle

  # Black Market Crawler 1
  blackmarket-crawler-1:
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.blackmarket
    container_name: bev_blackmarket_crawler_1
    environment:
      REDIS_HOST: redis-arm
      CRAWLER_ID: blackmarket_1
      TOR_PROXY: ${TOR_PROXY:-}
      MINIO_ENDPOINT: minio1:9000
    volumes:
      - crawler_blackmarket_data:/app/data
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
    depends_on:
      - redis-arm
      - minio1

  # Black Market Crawler 2
  blackmarket-crawler-2:
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.blackmarket
    container_name: bev_blackmarket_crawler_2
    environment:
      REDIS_HOST: redis-arm
      CRAWLER_ID: blackmarket_2
      TOR_PROXY: ${TOR_PROXY:-}
      MINIO_ENDPOINT: minio1:9000
    volumes:
      - crawler_blackmarket_data:/app/data
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
    depends_on:
      - redis-arm
      - minio1

  # Vendor Profiler 1
  vendor-profiler-1:
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.vendor
    container_name: bev_vendor_profiler_1
    environment:
      REDIS_HOST: redis-arm
      PROFILER_ID: vendor_1
      MINIO_ENDPOINT: minio1:9000
    volumes:
      - vendor_data:/app/data
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
    depends_on:
      - redis-arm
      - minio1

  # Vendor Profiler 2
  vendor-profiler-2:
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.vendor
    container_name: bev_vendor_profiler_2
    environment:
      REDIS_HOST: redis-arm
      PROFILER_ID: vendor_2
      MINIO_ENDPOINT: minio1:9000
    volumes:
      - vendor_data:/app/data
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
    depends_on:
      - redis-arm
      - minio1

  # Transaction Tracker
  transaction-tracker:
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.transaction
    container_name: bev_transaction_tracker
    environment:
      REDIS_HOST: redis-arm
      MINIO_ENDPOINT: minio1:9000
      BLOCKCHAIN_ENDPOINTS: ${BLOCKCHAIN_ENDPOINTS:-}
    volumes:
      - transaction_data:/app/data
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
    depends_on:
      - redis-arm
      - minio1

  # Multi-Modal Processor 1
  multimodal-processor-1:
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.multimodal
    container_name: bev_multimodal_processor_1
    environment:
      REDIS_HOST: redis-arm
      PROCESSOR_ID: multimodal_1
      MINIO_ENDPOINT: minio1:9000
      LITELLM_ENDPOINT: http://request-multiplexer:8080
    volumes:
      - multimodal_data:/app/data
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
    depends_on:
      - redis-arm
      - minio1
      - request-multiplexer

  # Multi-Modal Processor 2
  multimodal-processor-2:
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.multimodal
    container_name: bev_multimodal_processor_2
    environment:
      REDIS_HOST: redis-arm
      PROCESSOR_ID: multimodal_2
      MINIO_ENDPOINT: minio1:9000
      LITELLM_ENDPOINT: http://request-multiplexer:8080
    volumes:
      - multimodal_data:/app/data
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
    depends_on:
      - redis-arm
      - minio1
      - request-multiplexer

  # Multi-Modal Processor 3
  multimodal-processor-3:
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.multimodal
    container_name: bev_multimodal_processor_3
    environment:
      REDIS_HOST: redis-arm
      PROCESSOR_ID: multimodal_3
      MINIO_ENDPOINT: minio1:9000
      LITELLM_ENDPOINT: http://request-multiplexer:8080
    volumes:
      - multimodal_data:/app/data
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
    depends_on:
      - redis-arm
      - minio1
      - request-multiplexer

  # Multi-Modal Processor 4
  multimodal-processor-4:
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.multimodal
    container_name: bev_multimodal_processor_4
    environment:
      REDIS_HOST: redis-arm
      PROCESSOR_ID: multimodal_4
      MINIO_ENDPOINT: minio1:9000
      LITELLM_ENDPOINT: http://request-multiplexer:8080
    volumes:
      - multimodal_data:/app/data
    restart: always
    logging: *default-logging
    <<: *arm-resources
    networks:
      - bev_oracle
    depends_on:
      - redis-arm
      - minio1
      - request-multiplexer