version: '3.9'
x-logging: &id002
  driver: json-file
  options:
    max-size: 10m
    max-file: '3'
x-arm-resources:
  deploy: &id003
    resources:
      limits:
        memory: 400M
        cpus: '0.07'
      reservations:
        memory: 128M
        cpus: '0.02'
x-arm-small-resources:
  deploy: &id001
    resources:
      limits:
        memory: 200M
        cpus: '0.04'
      reservations:
        memory: 64M
        cpus: '0.01'
x-arm-monitoring-resources:
  deploy: &id004
    resources:
      limits:
        memory: 1G
        cpus: '0.2'
      reservations:
        memory: 512M
        cpus: '0.05'
networks:
  bev_oracle:
    driver: bridge
    ipam:
      config:
      - subnet: 172.31.0.0/16
  external_thanos:
    external: true
    name: bev_osint
volumes:
  redis_data: null
  n8n_data: null
  nginx_logs: null
  crawler_data: null
  intel_data: null
  proxy_data: null
  influxdb_data: null
  influxdb_data_replica: null
  telegraf_data: null
  minio_data1: null
  minio_data2: null
  minio_data3: null
  celery_data: null
  litellm_data: null
  genetic_data: null
  knowledge_data: null
  toolmaster_data: null
  edge_data: null
  drm_data: null
  watermark_data: null
  crypto_data: null
  n8n_advanced_data1: null
  n8n_advanced_data2: null
  n8n_advanced_data3: null
  minio_expansion_data: null
  crawler_blackmarket_data: null
  vendor_data: null
  transaction_data: null
  multimodal_data: null
  prometheus_data: null
  prometheus_config: null
  grafana_data: null
  grafana_config: null
  alertmanager_data: null
  alertmanager_config: null
  vault_data: null
  vault_config: null
  vault_tls: null
services:
  redis-arm:
    deploy: *id001
    image: redis:7-alpine
    platform: linux/arm64
    container_name: bev_redis_oracle
    ports:
    - 6379:6379
    volumes:
    - redis_data:/data
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    - external_thanos
    healthcheck:
      test:
      - CMD
      - redis-cli
      - ping
      interval: 30s
      timeout: 10s
      retries: 3
  n8n:
    deploy: *id003
    image: n8nio/n8n:latest
    platform: linux/arm64
    container_name: bev_n8n
    environment:
      N8N_BASIC_AUTH_ACTIVE: 'true'
      N8N_BASIC_AUTH_USER: admin
      N8N_BASIC_AUTH_PASSWORD: ${N8N_PASSWORD:-admin123}
      N8N_HOST: 0.0.0.0
      N8N_PORT: 5678
      DB_TYPE: sqlite
    ports:
    - 5678:5678
    volumes:
    - n8n_data:/home/node/.n8n
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    depends_on:
    - redis-arm
  nginx:
    deploy: *id001
    image: nginx:alpine
    container_name: bev_nginx
    ports:
    - 80:80
    - 443:443
    volumes:
    - ./nginx.conf:/etc/nginx/nginx.conf:ro
    - nginx_logs:/var/log/nginx
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    healthcheck:
      test:
      - CMD
      - nginx
      - -t
      interval: 30s
      timeout: 10s
      retries: 3
  research_crawler:
    deploy: *id003
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.research
    container_name: bev_research_crawler
    environment:
      REDIS_HOST: redis-arm
      THANOS_API: http://100.122.12.54:8000
    volumes:
    - crawler_data:/app/data
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    - external_thanos
    depends_on:
    - redis-arm
  intel_processor:
    deploy: *id003
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.intel
    container_name: bev_intel_processor
    environment:
      REDIS_HOST: redis-arm
      POSTGRES_HOST: 100.122.12.54
    volumes:
    - intel_data:/app/data
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    - external_thanos
    depends_on:
    - redis-arm
  proxy_manager:
    deploy: *id003
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.proxy
    container_name: bev_proxy_manager
    ports:
    - 8888:8888
    volumes:
    - proxy_data:/app/proxies
    restart: always
    logging: *id002
    networks:
    - bev_oracle
  influxdb-primary:
    deploy: *id003
    image: influxdb:2.7-alpine
    platform: linux/arm64
    container_name: bev_influxdb_primary
    ports:
    - 8086:8086
    environment:
      INFLUXDB_DB: bev_metrics
      INFLUXDB_ADMIN_USER: admin
      INFLUXDB_ADMIN_PASSWORD: ${INFLUXDB_PASSWORD:-admin123}
      INFLUXDB_HTTP_AUTH_ENABLED: 'true'
    volumes:
    - influxdb_data:/var/lib/influxdb2
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    - external_thanos
    healthcheck:
      test:
      - CMD
      - influx
      - ping
      interval: 30s
      timeout: 10s
      retries: 3
  influxdb-replica:
    deploy: *id003
    image: influxdb:2.7-alpine
    platform: linux/arm64
    container_name: bev_influxdb_replica
    ports:
    - 8087:8086
    environment:
      INFLUXDB_DB: bev_metrics_replica
      INFLUXDB_ADMIN_USER: admin
      INFLUXDB_ADMIN_PASSWORD: ${INFLUXDB_PASSWORD:-admin123}
      INFLUXDB_HTTP_AUTH_ENABLED: 'true'
    volumes:
    - influxdb_data_replica:/var/lib/influxdb2
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    - external_thanos
    depends_on:
    - influxdb-primary
  telegraf:
    deploy: *id001
    image: telegraf:1.28-alpine
    platform: linux/arm64
    container_name: bev_telegraf
    environment:
      INFLUXDB_URL: http://influxdb-primary:8086
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN:-admin-token}
      THANOS_ENDPOINT: http://100.122.12.54:9090
    volumes:
    - telegraf_data:/tmp/telegraf
    - /proc:/host/proc:ro
    - /sys:/host/sys:ro
    - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    - external_thanos
    depends_on:
    - influxdb-primary
  node-exporter:
    deploy: *id001
    image: prom/node-exporter:latest
    platform: linux/arm64
    container_name: bev_node_exporter
    ports:
    - 9100:9100
    command:
    - --path.procfs=/host/proc
    - --path.rootfs=/rootfs
    - --path.sysfs=/host/sys
    - --collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)
    volumes:
    - /proc:/host/proc:ro
    - /sys:/host/sys:ro
    - /:/rootfs:ro
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    - external_thanos
  prometheus:
    deploy: *id004
    image: prom/prometheus:latest
    platform: linux/arm64
    container_name: bev_prometheus_oracle
    ports:
    - 9090:9090
    command:
    - --config.file=/etc/prometheus/prometheus.yml
    - --storage.tsdb.path=/prometheus
    - --storage.tsdb.retention.time=30d
    - --storage.tsdb.retention.size=15GB
    - --web.console.libraries=/etc/prometheus/console_libraries
    - --web.console.templates=/etc/prometheus/consoles
    - --web.enable-lifecycle
    - --web.enable-admin-api
    - --web.external-url=http://100.96.197.84:9090
    - --log.level=info
    - --query.max-concurrency=50
    - --query.timeout=2m
    - --storage.remote.flush-deadline=1m
    environment:
      PROMETHEUS_REPLICA: oracle1
      THANOS_RECEIVER_ENDPOINT: http://100.122.12.54:19291/api/v1/receive
      ALERTMANAGER_HOST: alertmanager
      ALERTMANAGER_PORT: '9093'
    volumes:
    - prometheus_data:/prometheus
    - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    - ./config/prometheus-alerts.yml:/etc/prometheus/prometheus-alerts.yml:ro
    - prometheus_config:/etc/prometheus/config:ro
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    - external_thanos
    depends_on:
    - redis-arm
    healthcheck:
      test:
      - CMD
      - wget
      - --no-verbose
      - --tries=1
      - --spider
      - http://localhost:9090/-/healthy
      interval: 30s
      timeout: 10s
      retries: 3
  grafana:
    deploy: *id004
    image: grafana/grafana:latest
    platform: linux/arm64
    container_name: bev_grafana_oracle
    ports:
    - 3000:3000
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-piechart-panel
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
      GF_SECURITY_ALLOW_EMBEDDING: 'true'
      GF_AUTH_ANONYMOUS_ENABLED: 'false'
      GF_USERS_ALLOW_SIGN_UP: 'false'
      GF_SMTP_ENABLED: 'false'
      GF_ALERTING_ENABLED: 'true'
      GF_UNIFIED_ALERTING_ENABLED: 'true'
      GF_FEATURE_TOGGLES_ENABLE: prometheusAzureOverrideAudience
      GF_SERVER_ROOT_URL: http://100.96.197.84:3000
      GF_DATABASE_TYPE: sqlite3
      GF_DATABASE_PATH: /var/lib/grafana/grafana.db
      GF_SESSION_PROVIDER: file
    volumes:
    - grafana_data:/var/lib/grafana
    - ./config/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    - ./config/grafana-dashboards.json:/etc/grafana/provisioning/dashboards/dashboards.json:ro
    - grafana_config:/etc/grafana/provisioning:ro
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    - external_thanos
    depends_on:
    - prometheus
    healthcheck:
      test:
      - CMD-SHELL
      - curl -f http://localhost:3000/api/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
  alertmanager:
    deploy: *id001
    image: prom/alertmanager:latest
    platform: linux/arm64
    container_name: bev_alertmanager_oracle
    ports:
    - 9093:9093
    command:
    - --config.file=/etc/alertmanager/alertmanager.yml
    - --storage.path=/alertmanager
    - --web.external-url=http://100.96.197.84:9093
    - --web.route-prefix=/
    - --cluster.listen-address=0.0.0.0:9094
    - --cluster.peer=100.122.12.54:9094
    - --log.level=info
    environment:
      ALERTMANAGER_CLUSTER_PEER: 100.122.12.54:9094
    volumes:
    - alertmanager_data:/alertmanager
    - ./config/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    - alertmanager_config:/etc/alertmanager:ro
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    - external_thanos
    depends_on:
    - prometheus
    healthcheck:
      test:
      - CMD-SHELL
      - wget --no-verbose --tries=1 --spider http://localhost:9093/-/healthy || exit
        1
      interval: 30s
      timeout: 10s
      retries: 3
  minio1:
    deploy: *id003
    image: minio/minio:latest
    platform: linux/arm64
    container_name: bev_minio1
    ports:
    - 9001:9000
    - 9011:9001
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD:-admin123456}
    command: server --console-address ":9001" http://minio{1...3}/data{1...2}
    volumes:
    - minio_data1:/data1
    - minio_data1:/data2
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:9000/minio/health/live
      interval: 30s
      timeout: 20s
      retries: 3
  minio2:
    deploy: *id003
    image: minio/minio:latest
    platform: linux/arm64
    container_name: bev_minio2
    ports:
    - 9002:9000
    - 9012:9001
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD:-admin123456}
    command: server --console-address ":9001" http://minio{1...3}/data{1...2}
    volumes:
    - minio_data2:/data1
    - minio_data2:/data2
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    depends_on:
    - minio1
  minio3:
    deploy: *id003
    image: minio/minio:latest
    platform: linux/arm64
    container_name: bev_minio3
    ports:
    - 9003:9000
    - 9013:9001
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD:-admin123456}
    command: server --console-address ":9001" http://minio{1...3}/data{1...2}
    volumes:
    - minio_data3:/data1
    - minio_data3:/data2
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    depends_on:
    - minio1
  celery-edge:
    deploy: *id003
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.celery
    container_name: bev_celery_edge
    environment:
      CELERY_BROKER_URL: redis://redis-arm:6379/0
      CELERY_RESULT_BACKEND: redis://redis-arm:6379/0
      WORKER_TYPE: edge_computing
      THANOS_ENDPOINT: http://100.122.12.54:8000
    volumes:
    - celery_data:/app/data
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    - external_thanos
    depends_on:
    - redis-arm
  celery-genetic:
    deploy: *id003
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.celery
    container_name: bev_celery_genetic
    environment:
      CELERY_BROKER_URL: redis://redis-arm:6379/1
      CELERY_RESULT_BACKEND: redis://redis-arm:6379/1
      WORKER_TYPE: genetic_optimization
    volumes:
    - celery_data:/app/data
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    depends_on:
    - redis-arm
  celery-knowledge:
    deploy: *id003
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.celery
    container_name: bev_celery_knowledge
    environment:
      CELERY_BROKER_URL: redis://redis-arm:6379/2
      CELERY_RESULT_BACKEND: redis://redis-arm:6379/2
      WORKER_TYPE: knowledge_synthesis
    volumes:
    - celery_data:/app/data
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    depends_on:
    - redis-arm
  celery-toolmaster:
    deploy: *id003
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.celery
    container_name: bev_celery_toolmaster
    environment:
      CELERY_BROKER_URL: redis://redis-arm:6379/3
      CELERY_RESULT_BACKEND: redis://redis-arm:6379/3
      WORKER_TYPE: toolmaster
    volumes:
    - celery_data:/app/data
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    depends_on:
    - redis-arm
  litellm-gateway-1:
    deploy: *id003
    image: ghcr.io/berriai/litellm:main-latest
    platform: linux/arm64
    container_name: bev_litellm_1
    ports:
    - 5000:4000
    environment:
      LITELLM_MASTER_KEY: ${LITELLM_KEY:-sk-1234567890}
      DATABASE_URL: sqlite:///tmp/litellm.db
    volumes:
    - litellm_data:/tmp
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    - external_thanos
  litellm-gateway-2:
    deploy: *id003
    image: ghcr.io/berriai/litellm:main-latest
    platform: linux/arm64
    container_name: bev_litellm_2
    ports:
    - 5001:4000
    environment:
      LITELLM_MASTER_KEY: ${LITELLM_KEY:-sk-1234567890}
      DATABASE_URL: sqlite:///tmp/litellm.db
    volumes:
    - litellm_data:/tmp
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    - external_thanos
  litellm-gateway-3:
    deploy: *id003
    image: ghcr.io/berriai/litellm:main-latest
    platform: linux/arm64
    container_name: bev_litellm_3
    ports:
    - 5002:4000
    environment:
      LITELLM_MASTER_KEY: ${LITELLM_KEY:-sk-1234567890}
      DATABASE_URL: sqlite:///tmp/litellm.db
    volumes:
    - litellm_data:/tmp
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    - external_thanos
  genetic-optimizer:
    deploy: *id003
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.genetic
    container_name: bev_genetic_optimizer
    environment:
      REDIS_HOST: redis-arm
      MINIO_ENDPOINT: minio1:9000
      MINIO_ACCESS_KEY: admin
      MINIO_SECRET_KEY: ${MINIO_PASSWORD:-admin123456}
    volumes:
    - genetic_data:/app/data
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    depends_on:
    - redis-arm
    - minio1
  request-multiplexer:
    deploy: *id003
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.multiplexer
    container_name: bev_request_multiplexer
    ports:
    - 8080:8080
    environment:
      LITELLM_ENDPOINTS: http://litellm-gateway-1:4000,http://litellm-gateway-2:4000,http://litellm-gateway-3:4000
      REDIS_HOST: redis-arm
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    depends_on:
    - litellm-gateway-1
    - litellm-gateway-2
    - litellm-gateway-3
  knowledge-synthesis:
    deploy: *id003
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.knowledge
    container_name: bev_knowledge_synthesis
    environment:
      REDIS_HOST: redis-arm
      MINIO_ENDPOINT: minio1:9000
      MINIO_ACCESS_KEY: admin
      MINIO_SECRET_KEY: ${MINIO_PASSWORD:-admin123456}
    volumes:
    - knowledge_data:/app/data
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    depends_on:
    - redis-arm
    - minio1
  toolmaster-orchestrator:
    deploy: *id003
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.toolmaster
    container_name: bev_toolmaster_orchestrator
    environment:
      REDIS_HOST: redis-arm
      LITELLM_ENDPOINT: http://request-multiplexer:8080
    volumes:
    - toolmaster_data:/app/data
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    depends_on:
    - redis-arm
    - request-multiplexer
  edge-worker-1:
    deploy: *id003
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.edge
    container_name: bev_edge_worker_1
    environment:
      REDIS_HOST: redis-arm
      WORKER_ID: edge_1
      THANOS_ENDPOINT: http://100.122.12.54:8000
    volumes:
    - edge_data:/app/data
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    - external_thanos
    depends_on:
    - redis-arm
  edge-worker-2:
    deploy: *id003
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.edge
    container_name: bev_edge_worker_2
    environment:
      REDIS_HOST: redis-arm
      WORKER_ID: edge_2
      THANOS_ENDPOINT: http://100.122.12.54:8000
    volumes:
    - edge_data:/app/data
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    - external_thanos
    depends_on:
    - redis-arm
  edge-worker-3:
    deploy: *id003
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.edge
    container_name: bev_edge_worker_3
    environment:
      REDIS_HOST: redis-arm
      WORKER_ID: edge_3
      THANOS_ENDPOINT: http://100.122.12.54:8000
    volumes:
    - edge_data:/app/data
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    - external_thanos
    depends_on:
    - redis-arm
  mq-infrastructure:
    deploy: *id003
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.mq
    container_name: bev_mq_infrastructure
    environment:
      REDIS_HOST: redis-arm
      CELERY_BROKER_URL: redis://redis-arm:6379/4
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    depends_on:
    - redis-arm
  drm-researcher-1:
    deploy: *id003
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.drm
    container_name: bev_drm_researcher_1
    environment:
      REDIS_HOST: redis-arm
      RESEARCHER_ID: drm_1
      MINIO_ENDPOINT: minio1:9000
    volumes:
    - drm_data:/app/data
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    depends_on:
    - redis-arm
    - minio1
  drm-researcher-2:
    deploy: *id003
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.drm
    container_name: bev_drm_researcher_2
    environment:
      REDIS_HOST: redis-arm
      RESEARCHER_ID: drm_2
      MINIO_ENDPOINT: minio1:9000
    volumes:
    - drm_data:/app/data
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    depends_on:
    - redis-arm
    - minio1
  watermark-analyzer-1:
    deploy: *id003
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.watermark
    container_name: bev_watermark_analyzer_1
    environment:
      REDIS_HOST: redis-arm
      ANALYZER_ID: watermark_1
      MINIO_ENDPOINT: minio1:9000
    volumes:
    - watermark_data:/app/data
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    depends_on:
    - redis-arm
    - minio1
  watermark-analyzer-2:
    deploy: *id003
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.watermark
    container_name: bev_watermark_analyzer_2
    environment:
      REDIS_HOST: redis-arm
      ANALYZER_ID: watermark_2
      MINIO_ENDPOINT: minio1:9000
    volumes:
    - watermark_data:/app/data
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    depends_on:
    - redis-arm
    - minio1
  crypto-researcher-1:
    deploy: *id003
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.crypto
    container_name: bev_crypto_researcher_1
    environment:
      REDIS_HOST: redis-arm
      RESEARCHER_ID: crypto_1
      BLOCKCHAIN_ENDPOINTS: ${BLOCKCHAIN_ENDPOINTS:-}
    volumes:
    - crypto_data:/app/data
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    depends_on:
    - redis-arm
  crypto-researcher-2:
    deploy: *id003
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.crypto
    container_name: bev_crypto_researcher_2
    environment:
      REDIS_HOST: redis-arm
      RESEARCHER_ID: crypto_2
      BLOCKCHAIN_ENDPOINTS: ${BLOCKCHAIN_ENDPOINTS:-}
    volumes:
    - crypto_data:/app/data
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    depends_on:
    - redis-arm
  n8n-advanced-1:
    deploy: *id003
    image: n8nio/n8n:latest
    platform: linux/arm64
    container_name: bev_n8n_advanced_1
    environment:
      N8N_BASIC_AUTH_ACTIVE: 'true'
      N8N_BASIC_AUTH_USER: admin
      N8N_BASIC_AUTH_PASSWORD: ${N8N_PASSWORD:-admin123}
      N8N_HOST: 0.0.0.0
      N8N_PORT: 5678
      DB_TYPE: sqlite
      INSTANCE_ID: advanced_1
    ports:
    - 5679:5678
    volumes:
    - n8n_advanced_data1:/home/node/.n8n
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    depends_on:
    - redis-arm
  n8n-advanced-2:
    deploy: *id003
    image: n8nio/n8n:latest
    platform: linux/arm64
    container_name: bev_n8n_advanced_2
    environment:
      N8N_BASIC_AUTH_ACTIVE: 'true'
      N8N_BASIC_AUTH_USER: admin
      N8N_BASIC_AUTH_PASSWORD: ${N8N_PASSWORD:-admin123}
      N8N_HOST: 0.0.0.0
      N8N_PORT: 5678
      DB_TYPE: sqlite
      INSTANCE_ID: advanced_2
    ports:
    - 5680:5678
    volumes:
    - n8n_advanced_data2:/home/node/.n8n
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    depends_on:
    - redis-arm
  n8n-advanced-3:
    deploy: *id003
    image: n8nio/n8n:latest
    platform: linux/arm64
    container_name: bev_n8n_advanced_3
    environment:
      N8N_BASIC_AUTH_ACTIVE: 'true'
      N8N_BASIC_AUTH_USER: admin
      N8N_BASIC_AUTH_PASSWORD: ${N8N_PASSWORD:-admin123}
      N8N_HOST: 0.0.0.0
      N8N_PORT: 5678
      DB_TYPE: sqlite
      INSTANCE_ID: advanced_3
    ports:
    - 5681:5678
    volumes:
    - n8n_advanced_data3:/home/node/.n8n
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    depends_on:
    - redis-arm
  minio-expansion:
    deploy: *id003
    image: minio/minio:latest
    platform: linux/arm64
    container_name: bev_minio_expansion
    ports:
    - 9004:9000
    - 9014:9001
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD:-admin123456}
    command: server --console-address ":9001" /data
    volumes:
    - minio_expansion_data:/data
    restart: always
    logging: *id002
    networks:
    - bev_oracle
  blackmarket-crawler-1:
    deploy: *id003
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.blackmarket
    container_name: bev_blackmarket_crawler_1
    environment:
      REDIS_HOST: redis-arm
      CRAWLER_ID: blackmarket_1
      TOR_PROXY: ${TOR_PROXY:-}
      MINIO_ENDPOINT: minio1:9000
    volumes:
    - crawler_blackmarket_data:/app/data
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    depends_on:
    - redis-arm
    - minio1
  blackmarket-crawler-2:
    deploy: *id003
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.blackmarket
    container_name: bev_blackmarket_crawler_2
    environment:
      REDIS_HOST: redis-arm
      CRAWLER_ID: blackmarket_2
      TOR_PROXY: ${TOR_PROXY:-}
      MINIO_ENDPOINT: minio1:9000
    volumes:
    - crawler_blackmarket_data:/app/data
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    depends_on:
    - redis-arm
    - minio1
  vendor-profiler-1:
    deploy: *id003
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.vendor
    container_name: bev_vendor_profiler_1
    environment:
      REDIS_HOST: redis-arm
      PROFILER_ID: vendor_1
      MINIO_ENDPOINT: minio1:9000
    volumes:
    - vendor_data:/app/data
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    depends_on:
    - redis-arm
    - minio1
  vendor-profiler-2:
    deploy: *id003
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.vendor
    container_name: bev_vendor_profiler_2
    environment:
      REDIS_HOST: redis-arm
      PROFILER_ID: vendor_2
      MINIO_ENDPOINT: minio1:9000
    volumes:
    - vendor_data:/app/data
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    depends_on:
    - redis-arm
    - minio1
  transaction-tracker:
    deploy: *id003
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.transaction
    container_name: bev_transaction_tracker
    environment:
      REDIS_HOST: redis-arm
      MINIO_ENDPOINT: minio1:9000
      BLOCKCHAIN_ENDPOINTS: ${BLOCKCHAIN_ENDPOINTS:-}
    volumes:
    - transaction_data:/app/data
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    depends_on:
    - redis-arm
    - minio1
  multimodal-processor-1:
    deploy: *id003
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.multimodal
    container_name: bev_multimodal_processor_1
    environment:
      REDIS_HOST: redis-arm
      PROCESSOR_ID: multimodal_1
      MINIO_ENDPOINT: minio1:9000
      LITELLM_ENDPOINT: http://request-multiplexer:8080
    volumes:
    - multimodal_data:/app/data
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    depends_on:
    - redis-arm
    - minio1
    - request-multiplexer
  multimodal-processor-2:
    deploy: *id003
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.multimodal
    container_name: bev_multimodal_processor_2
    environment:
      REDIS_HOST: redis-arm
      PROCESSOR_ID: multimodal_2
      MINIO_ENDPOINT: minio1:9000
      LITELLM_ENDPOINT: http://request-multiplexer:8080
    volumes:
    - multimodal_data:/app/data
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    depends_on:
    - redis-arm
    - minio1
    - request-multiplexer
  multimodal-processor-3:
    deploy: *id003
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.multimodal
    container_name: bev_multimodal_processor_3
    environment:
      REDIS_HOST: redis-arm
      PROCESSOR_ID: multimodal_3
      MINIO_ENDPOINT: minio1:9000
      LITELLM_ENDPOINT: http://request-multiplexer:8080
    volumes:
    - multimodal_data:/app/data
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    depends_on:
    - redis-arm
    - minio1
    - request-multiplexer
  multimodal-processor-4:
    deploy: *id003
    build:
      context: .
      dockerfile: docker/oracle/Dockerfile.multimodal
    container_name: bev_multimodal_processor_4
    environment:
      REDIS_HOST: redis-arm
      PROCESSOR_ID: multimodal_4
      MINIO_ENDPOINT: minio1:9000
      LITELLM_ENDPOINT: http://request-multiplexer:8080
    volumes:
    - multimodal_data:/app/data
    restart: always
    logging: *id002
    networks:
    - bev_oracle
    depends_on:
    - redis-arm
    - minio1
    - request-multiplexer
