version: '3.8'

services:
  # OSINT Integration Layer Service
  osint-integration:
    container_name: bev_osint_integration
    build:
      context: .
      dockerfile: Dockerfile.osint-integration
    ports:
      - "8092:8092"  # Integration layer API
    environment:
      # Database connections
      POSTGRES_HOST: bev_postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: researcher
      POSTGRES_PASSWORD: osint_research_2024
      POSTGRES_DB: osint

      NEO4J_URI: bolt://bev_neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: BevGraphMaster2024

      REDIS_URL: redis://bev_redis:6379

      QDRANT_HOST: bev_qdrant
      QDRANT_PORT: 6333

      # Message queue connections
      KAFKA_BROKERS: bev_kafka:9092
      RABBITMQ_URL: amqp://guest:guest@bev_rabbitmq:5672/
      NATS_URL: nats://bev_nats:4222

      # Avatar system connection
      AVATAR_WEBSOCKET_URL: ws://bev_avatar:8091/ws

      # Performance settings
      RESPONSE_TIMEOUT: 100
      BATCH_SIZE: 10
      MAX_WORKERS: 4

      # Logging
      LOG_LEVEL: INFO
    depends_on:
      - postgres
      - neo4j
      - redis
      - qdrant
      - kafka
      - rabbitmq
      - nats
      - avatar-system
    networks:
      - bev_network
    volumes:
      - ./src/avatar:/app/src/avatar
      - ./logs/osint-integration:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8092/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Advanced Avatar System (if not already running)
  avatar-system:
    container_name: bev_avatar
    build:
      context: .
      dockerfile: Dockerfile.avatar
    ports:
      - "8091:8091"  # Avatar WebSocket/API
    environment:
      REDIS_URL: redis://bev_redis:6379
      GPU_MEMORY_FRACTION: 0.6
      TARGET_FPS: 120
      VOICE_ENABLED: "true"
      OSINT_INTEGRATION: "true"
      LOG_LEVEL: INFO
    depends_on:
      - redis
    networks:
      - bev_network
    volumes:
      - ./src/avatar:/app/src/avatar
      - ./models/metahuman:/app/models
      - ./logs/avatar:/app/logs
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8091/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL (if not already running)
  postgres:
    container_name: bev_postgres
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: researcher
      POSTGRES_PASSWORD: osint_research_2024
      POSTGRES_DB: osint
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - bev_network
    ports:
      - "5432:5432"

  # Neo4j Graph Database (if not already running)
  neo4j:
    container_name: bev_neo4j
    image: neo4j:5-community
    environment:
      NEO4J_AUTH: neo4j/BevGraphMaster2024
      NEO4J_dbms_memory_pagecache_size: 2G
      NEO4J_dbms_memory_heap_max__size: 2G
    volumes:
      - neo4j_data:/data
    networks:
      - bev_network
    ports:
      - "7474:7474"  # Browser
      - "7687:7687"  # Bolt

  # Redis Cache (if not already running)
  redis:
    container_name: bev_redis
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    networks:
      - bev_network
    ports:
      - "6379:6379"

  # Qdrant Vector Database (if not already running)
  qdrant:
    container_name: bev_qdrant
    image: qdrant/qdrant:latest
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - bev_network
    ports:
      - "6333:6333"

  # Kafka Message Broker
  kafka:
    container_name: bev_kafka
    image: confluentinc/cp-kafka:latest
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://bev_kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - bev_network
    ports:
      - "9092:9092"

  # Zookeeper for Kafka
  zookeeper:
    container_name: bev_zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - bev_network
    ports:
      - "2181:2181"

  # RabbitMQ Message Broker
  rabbitmq:
    container_name: bev_rabbitmq
    image: rabbitmq:3-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - bev_network
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI

  # NATS Streaming Server
  nats:
    container_name: bev_nats
    image: nats:latest
    command: "-js"
    networks:
      - bev_network
    ports:
      - "4222:4222"  # Client connections
      - "8222:8222"  # HTTP monitoring

networks:
  bev_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  postgres_data:
  neo4j_data:
  redis_data:
  qdrant_data: